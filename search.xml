<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>issue</title>
      <link href="/2023/03/03/issue/"/>
      <url>/2023/03/03/issue/</url>
      
        <content type="html"><![CDATA[<h1 id="当我们项目中添加了个多个git仓库。当我们在当前仓库push的时候，它不会提交你clone的内部仓库。"><a href="#当我们项目中添加了个多个git仓库。当我们在当前仓库push的时候，它不会提交你clone的内部仓库。" class="headerlink" title="当我们项目中添加了个多个git仓库。当我们在当前仓库push的时候，它不会提交你clone的内部仓库。"></a>当我们项目中添加了个多个git仓库。当我们在当前仓库push的时候，它不会提交你clone的内部仓库。</h1><p>就是外部仓库无法 track 一个嵌套仓库，外部仓库所有的 add，commit，push 都与嵌套仓库没有任何关系。</p><h2 id="首先你需要移除这个仓库"><a href="#首先你需要移除这个仓库" class="headerlink" title="首先你需要移除这个仓库"></a>首先你需要移除这个仓库</h2><p>git rm -f –cahche themes&#x2F;next  &#x2F;&#x2F; clone 的地址是 themes&#x2F;next</p><h2 id="1-强制将next仓库嵌套进你当前的仓库"><a href="#1-强制将next仓库嵌套进你当前的仓库" class="headerlink" title="1. 强制将next仓库嵌套进你当前的仓库"></a>1. 强制将next仓库嵌套进你当前的仓库</h2><p>删除掉themes&#x2F;next 中 .git 文件，这样next就是一个普通的文件，不和任何仓库有关系。 在外部文件可以直接push</p><h2 id="2-使用-git-submodule-add-地址-子模块目录"><a href="#2-使用-git-submodule-add-地址-子模块目录" class="headerlink" title="2. 使用 git submodule add 地址  子模块目录"></a>2. 使用 git submodule add 地址  子模块目录</h2><p>但是子模块的代码不由我们控制，也就是源仓库修改，我们这边受到牵连<br>命令行中输入 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule add https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>执行完成后，会在站点根目录下生成 .gitmodules 文件，内容如下：</p>[submodule "themes/next"]    path = themes/next    url = https://github.com/theme-next/hexo-theme-next<p>配置文件保存了项目 URL 与已经拉取的本地目录之间的映射，如果有多个子模块，该文件中就会有多条记录。要重点注意的是，该文件应像 .gitignore 文件一样受到（通过）版本控制，和该项目的其他部分一同被拉取推送。有了映射关系，克隆该项目的人就知道去哪获得子模块了</p><h2 id="fork别人的仓库到自己的仓库中去"><a href="#fork别人的仓库到自己的仓库中去" class="headerlink" title="fork别人的仓库到自己的仓库中去"></a>fork别人的仓库到自己的仓库中去</h2><p>重复第二部的命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule add 自己仓库的地址 themes/next</span><br></pre></td></tr></table></figure>[submodule "themes/next"]    path = themes/next    url = https://github.com/izhaowang/hexo-theme-next    ignore = all <ul><li>all：子模块永远不会被视为已修改（但仍将显示在状态输出中并在提交时提交）。</li><li>dirty：将忽略对子模块工作树的所有更改，仅考虑子模块的HEAD与其在超级项目中的记录状态之间的已提交差异。</li><li>untracked：只有子模块中未跟踪的文件才会被忽略。将显示对跟踪文件的提交的差异和修改。</li><li>none：默认选项，不会忽略对子模块的修改，显示所有已提交的差异以及对已跟踪和未跟踪文件的修</li></ul><h2 id="去修改子模块的git-地址"><a href="#去修改子模块的git-地址" class="headerlink" title="去修改子模块的git 地址"></a>去修改子模块的git 地址</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 在.gitmoudles中修改新的url地址</span><br><span class="line">2. 在themes/next目录下 命令输入 git submodule sync --recursive 即可</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mogoDB</title>
      <link href="/2023/03/03/mogoDB/"/>
      <url>/2023/03/03/mogoDB/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h1><p>存储数据的仓库， 将数据进行分门别类的存储， 它本身是一个软件， 但是可以通过api 去操作它<br>数据库软件 mysql， mongDB、 oracle<br>mongoDB api 使用js语法；  mysql &#x3D;》 php语言<br>node.js 可以操作 mysql</p><h1 id="安装mongoDB-和-可视化软件-mongoDBcompass；"><a href="#安装mongoDB-和-可视化软件-mongoDBcompass；" class="headerlink" title="安装mongoDB 和 可视化软件 mongoDBcompass；"></a>安装mongoDB 和 可视化软件 mongoDBcompass；</h1><h1 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h1><table><thead><tr><th>术语</th><th>解释</th></tr></thead><tbody><tr><td>dataBase</td><td>数据仓库，mongoDB可以创建多个数据仓库</td></tr><tr><td>collection</td><td>集合， 表示一组数据的集合；类似于js中的数组</td></tr><tr><td>document</td><td>文档， 表示具体的一条数据，类似于js中的对象</td></tr><tr><td>field</td><td>字段， 文档中的属性名称，类似于js中对象的属性</td></tr></tbody></table><p><img src="https://images.gitee.com/uploads/images/2021/1111/113223_17be9e73_6525038.png" alt="数据库和集合" title="屏幕截图.png"></p><p><img src="https://images.gitee.com/uploads/images/2021/1111/113355_5ca7bf7a_6525038.png" alt="整个列表就是文档， 每一条数据就是字段" title="屏幕截图.png"></p><h1 id="node-js-操作数据库；"><a href="#node-js-操作数据库；" class="headerlink" title="node.js 操作数据库；"></a>node.js 操作数据库；</h1><p>操作数据需要 借助第三方包 ： Mongoose<br>可以借助这个包进行数据库链接 和 其他操作</p><ol><li>首先再磁盘G中的node文件夹中建立 dataBase 文件夹</li><li>然后用powershell 进入改文件夹下<br><img src="https://images.gitee.com/uploads/images/2021/1111/113919_638870ab_6525038.png" alt="输入图片说明" title="屏幕截图.png"></li><li>执行 npm install mongoose</li><li>安装第三方包 mongoose 完成</li><li>启动mongoDB服务， 就是打开数据库<br>net start mongodb 启动<br>net stop mongodb<br><img src="https://images.gitee.com/uploads/images/2021/1111/114304_bbc2664e_6525038.png" alt="输入图片说明" title="屏幕截图.png"></li><li>用mongoose 链接数据库<br> 创建01.js文件；<br>01.js中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 引入 mongoose</span><br><span class="line">const mongoose = require(&quot;mongoose&quot;);</span><br><span class="line">// mongoose.connect(&quot;mongodb/数据库地址/数据库名称&quot;)</span><br><span class="line">mongoose.connect(&#x27;mongodb://localhost/playground&#x27;)</span><br><span class="line">.then(</span><br><span class="line">    () =&gt; &#123; console.log(&#x27;链接成功&#x27;)&#125;</span><br><span class="line">)</span><br><span class="line">.catch(err =&gt; console.log(&quot;数据库连接失败&quot;))</span><br></pre></td></tr></table></figure> *** 再mongodb中不需要显示的创建数据库， 你可直接使用数据库， 当这个数据不存在时，它会自动帮你创建一个数据库 ***</li></ol><h1 id="数据库中-增、-删、-改、-查"><a href="#数据库中-增、-删、-改、-查" class="headerlink" title="数据库中 增、 删、 改、 查"></a>数据库中 增、 删、 改、 查</h1><ol><li><p>创建集合。 并为集合设置集合规则<br>然后才能插入文档<br>1.1 首先你要对创建的集合设定规则，<br>1.2 然后才去创建集合 mongoose.Schema 构造函数创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//  设定集合规则</span><br><span class="line"> const courseSchema = new mongoose.Schema(&#123;</span><br><span class="line">     name: String,</span><br><span class="line">     author: String,</span><br><span class="line">     isPublished: Boolean</span><br><span class="line"> &#125;)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">// 创建集合并应用规则 第一个参数表示集合名称 Courses再集合里面会自动加s， 第二个参数表示为这个集合应用哪个规则</span><br><span class="line">const Course = mongoose.model(&#x27;Course&#x27;, courseSchema); // Course</span><br></pre></td></tr></table></figure></li><li><p>插入数据（文档），<br> 2.1 创建集合实例 上面的Course  就是一个构造函数<br> 2.2 调用实例下的 save 方法将数据保存到数据库中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    // 创建集合实例-- 创建文档</span><br><span class="line">const course = new Course(&#123;</span><br><span class="line">    name: &#x27;node.js实战&#x27;,</span><br><span class="line">    author: &#x27;cc&#x27;,</span><br><span class="line">    isPublished: true</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 将文档插入到数据库</span><br><span class="line">course.save()</span><br></pre></td></tr></table></figure><p><img src="https://images.gitee.com/uploads/images/2021/1111/151722_69fefab0_6525038.png" alt="输入图片说明" title="屏幕截图.png"></p></li><li><p>插入数据（文档）另一种方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Course.create(&#123;</span><br><span class="line">    name: &#x27;javascript&#x27;,</span><br><span class="line">    author: &#x27;cc&#x27;,</span><br><span class="line">    isPublished: true</span><br><span class="line">&#125;, (err, result) =&gt; &#123;console.log(err); console.log(result)&#125;);</span><br><span class="line"></span><br><span class="line">// 数据库操作都是异步的， 所以你也可以使用 promise的方式去进行结果的处理</span><br><span class="line">Course.create(&#123;</span><br><span class="line">    name: &#x27;javascript&#x27;,</span><br><span class="line">    author: &#x27;cc&#x27;,</span><br><span class="line">    isPublished: true</span><br><span class="line">&#125;)</span><br><span class="line">    .then(doc =&gt; console.log(doc))</span><br><span class="line">    .catch(e =&gt; console.log(e))</span><br></pre></td></tr></table></figure></li><li><p>向数据库中导入数据<br><a href="https://blog.csdn.net/weixin_44517301/article/details/114823073">参考连接</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 将现成的数据插入到数据库中 通过命令行工具 mongoimport</span><br><span class="line">mongoimport -d 数据库名称 -c 集合名称 --file 要导入的数据文件</span><br><span class="line"></span><br><span class="line">// 1. 首先你需要将mongoimport 添加到系统环境变量中去 然后才能再命令行中使用 mongoimport</span><br><span class="line"></span><br><span class="line">// 2. 建立一个json文件， 命名为user.json</span><br><span class="line"></span><br><span class="line">// 3. 确定已经将环境变量path 添加了 mongoimport</span><br><span class="line"></span><br><span class="line">// 4. 再命令行中使用命令 mongoimport -d playground -c users --file user.json </span><br></pre></td></tr></table></figure></li><li><p>在数据库的集合中查询文档</p></li></ol><h2 id="find-方法-注意：-find-方法返回的永远是一个数组，-哪怕只有一条数据，-也是一个数组；-如果返回的数据不存在那么-返回空数组"><a href="#find-方法-注意：-find-方法返回的永远是一个数组，-哪怕只有一条数据，-也是一个数组；-如果返回的数据不存在那么-返回空数组" class="headerlink" title="find 方法 *** 注意： find 方法返回的永远是一个数组， 哪怕只有一条数据， 也是一个数组； 如果返回的数据不存在那么 返回空数组 ***"></a>find 方法 *** 注意： find 方法返回的永远是一个数组， 哪怕只有一条数据， 也是一个数组； 如果返回的数据不存在那么 返回空数组 ***</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const mongoose = require(&quot;mongoose&quot;); // 引入 mongoose</span><br><span class="line"></span><br><span class="line">mongoose.connect(&#x27;mongodb://localhost/playground&#x27;) // 连接数据库</span><br><span class="line">    .then(() =&gt; console.log(&#x27;链接chengg&#x27;))</span><br><span class="line">    .catch(err =&gt; console.log(err));</span><br><span class="line"></span><br><span class="line">// 设定集合规则</span><br><span class="line">const courseSchema = new mongoose.Schema(&#123;</span><br><span class="line">    name: String,</span><br><span class="line">    author: String,</span><br><span class="line">    isPublished: Boolean</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 创建集合构造函数</span><br><span class="line">const Course = mongoose.model(&#x27;Course&#x27;, courseSchema);</span><br><span class="line"></span><br><span class="line">// 利用集合的构造函数下的 find方法 find() 里面没有参数会查询到所有文档数据</span><br><span class="line">Course.find().then(result =&gt; console.log(result))</span><br><span class="line"></span><br><span class="line">// 查询某个指定id 的文档数据</span><br><span class="line"></span><br><span class="line">Course.find(&#123;_id: &#x27;618cc3216e019fb68cb4959c&#x27;&#125;).then(result =&gt; console.log(result));</span><br><span class="line">*** 注意： find 方法返回的永远是一个数组， 哪怕只有一条数据， 也是一个数组； 如果返回的数据不存在那么 返回空数组 ***</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="用findOne-查找，-该方法返回一条-数据；-默认返回集合中第一条文档"><a href="#用findOne-查找，-该方法返回一条-数据；-默认返回集合中第一条文档" class="headerlink" title="用findOne 查找， 该方法返回一条 数据； 默认返回集合中第一条文档"></a>用findOne 查找， 该方法返回一条 数据； 默认返回集合中第一条文档</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Course.findOne().then(res =&gt; console.log(res)) // 默认返回第一条文档</span><br><span class="line"></span><br><span class="line">// 条件查找 查找 name 是javascript 的数据</span><br><span class="line">Course.findOne(&#123;name: &#x27;javascript&#x27;&#125;).then(res =&gt; console.log(res));</span><br></pre></td></tr></table></figure><h2 id="条件查找-如：-年龄大于-多少-年龄小于多少"><a href="#条件查找-如：-年龄大于-多少-年龄小于多少" class="headerlink" title="条件查找 如： 年龄大于 多少 年龄小于多少"></a>条件查找 如： 年龄大于 多少 年龄小于多少</h2><pre><code>User.find(&#123;age: &#123;$gt:0, $lt:20&#125;&#125;)  gt=== great than  lt === less thanfind 接受一个对象， age 属性值也是一个对象 &#123;$gt:0, $lt:20&#125;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User.find(&#123;age: &#123;$gt:0, $lt:20&#125;&#125;).then(res =&gt; console.log(res));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查询爱好包含足球的-使用-in-‘敲代码’，-‘打豆豆’-；"><a href="#查询爱好包含足球的-使用-in-‘敲代码’，-‘打豆豆’-；" class="headerlink" title="查询爱好包含足球的, 使用{$in: [‘敲代码’， ‘打豆豆’]}；"></a>查询爱好包含足球的, 使用{$in: [‘敲代码’， ‘打豆豆’]}；</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.find(&#123;bobbies: &#123;$in: [&#x27;敲代码&#x27;, &#x27;打豆豆&#x27;]&#125;&#125;).then(res =&gt; console.log(res));</span><br></pre></td></tr></table></figure><h2 id="查询出固定的字段，-比如数据只包含-name；find方法后面链式调用select-方法"><a href="#查询出固定的字段，-比如数据只包含-name；find方法后面链式调用select-方法" class="headerlink" title="查询出固定的字段， 比如数据只包含 name；find方法后面链式调用select 方法"></a>查询出固定的字段， 比如数据只包含 name；find方法后面链式调用select 方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.find().select(&quot;name&quot;).then(res =&gt; console.log(res));</span><br></pre></td></tr></table></figure><p>如图只有名字 没有age 和 hobbies 字段<br><img src="https://images.gitee.com/uploads/images/2021/1112/134044_f57d6895_6525038.png" alt="输入图片说明" title="屏幕截图.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 如果你不需要_id 那么你只需要在_id 前使用-</span><br><span class="line">User.find().select(&quot;-name -_id age&quot;).then(res =&gt; console.log(res));</span><br></pre></td></tr></table></figure><h2 id="对查询出来的数据进行排序，-年龄从小到大排列-或者从大到小降序（-age）排列"><a href="#对查询出来的数据进行排序，-年龄从小到大排列-或者从大到小降序（-age）排列" class="headerlink" title="对查询出来的数据进行排序， 年龄从小到大排列 或者从大到小降序（-age）排列"></a>对查询出来的数据进行排序， 年龄从小到大排列 或者从大到小降序（-age）排列</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// sort 从小到大升序 排列</span><br><span class="line">User.find().sort(&quot;age&quot;).then(res =&gt; console.log(res));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// sort 从大到小降序 排列</span><br><span class="line">User.find().sort(&quot;-age&quot;).then(res =&gt; console.log(res));</span><br></pre></td></tr></table></figure><h2 id="skip-limit-讲解-分页功能可以用到"><a href="#skip-limit-讲解-分页功能可以用到" class="headerlink" title="skip limit 讲解 分页功能可以用到"></a>skip limit 讲解 分页功能可以用到</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// skip(2) 查询出来的数据 跳过前两个文档</span><br><span class="line"></span><br><span class="line">// limit(2) 不管结果有多少条数据 我只显示两条数据</span><br><span class="line">User.find().skip(2).limit(2).then(res =&gt; console.log(res));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> // findOneAndDelete() 删除单个 方法里面的参数表示的是 条件 ， 如果匹配到多条文档 也只会删除第一条数据</span><br><span class="line">  // findOneAndDelete 方法返回 删除的那个数据</span><br><span class="line"> User.findOneAndDelete(&#123;age: 5&#125;).then(res =&gt; console.log(res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 删除多条数据  如果条件写 空对象&#123;&#125;； 那么他会删除整个集合；</span><br><span class="line">  // deleteMany 方法返回一个对象 &#123; deletedCount: 2 &#125; deletedCount 代表删除了几条数据；</span><br><span class="line"> User.deleteMany(&#123;&#125;).then(res =&gt; console.log(res)) </span><br></pre></td></tr></table></figure><h1 id="跟新文档"><a href="#跟新文档" class="headerlink" title="跟新文档"></a>跟新文档</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// updateOne(&#123;查询条件&#125;， &#123;要修改的值&#125;) 接受两个参数</span><br><span class="line">User.updateOne(&#123;age: 5&#125;, ).then(res =&gt; console.log(res))</span><br><span class="line"> // 返回值 &#123;</span><br><span class="line">   acknowledged: true,</span><br><span class="line">   modifiedCount: 1,</span><br><span class="line">   upsertedId: null,</span><br><span class="line">   upsertedCount: 0,</span><br><span class="line">   matchedCount: 1</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> // updataMany 一次更新多个文档；</span><br><span class="line"> updataMany(&#123;查询条件&#125;， &#123;要修改的值&#125;) 接受两个参数</span><br><span class="line"></span><br><span class="line"> User.updateMany(&#123;&#125;, &#123;age: 40&#125;).then(res =&gt; console.log(res));</span><br><span class="line"> // 将所有的数据的 age 变为40</span><br><span class="line"> // 返回值 &#123;</span><br><span class="line">   acknowledged: true,</span><br><span class="line">   modifiedCount: 2,</span><br><span class="line">   upsertedId: null,</span><br><span class="line">   upsertedCount: 0,</span><br><span class="line">   matchedCount: 3</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="mongoose-验证"><a href="#mongoose-验证" class="headerlink" title="mongoose 验证"></a>mongoose 验证</h1><p>在创建集合规则时， 可以设置当前字段的验证规则， 验证失败就插入失败</p><ol><li>required: true 表示该字段必传</li><li>maxlength 字符串最大长度</li><li>minlenght 字符串最小长度</li><li>trim 插入时是否去除字符串前后空格</li><li>min 数值最小2</li><li>max 数值</li><li>default 默认值</li><li>enum: [“javascript”, “c”, “php”] &#x2F;&#x2F; 表示当前字段可以填入 的值</li><li>validate: { &#x2F;&#x2F; 自定义的函数<br>validator: v &#x3D;&gt; { v &amp;&amp; v.length &gt; 4},<br>message: ‘传入的值不符合验证规则’ &#x2F;&#x2F; 自定义错误信息<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const userSchema = new  mongoose.Schema(&#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        required: [&#x27;true&#x27;, &#x27;请传入文章标题&#x27;] // 第二个参数表示 报错信息</span><br><span class="line">        maxlength: 2, // 最大长度</span><br><span class="line">        minlength: [0, &#x27;name 长度不能小于0&#x27;]</span><br><span class="line">        tirm: true //去除前后空格</span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">        type: Number,</span><br><span class="line">        min:10,</span><br><span class="line">        max: 90</span><br><span class="line">    &#125;,</span><br><span class="line">    hobbies: [String],</span><br><span class="line">    date: &#123;</span><br><span class="line">        type: Date // 日期</span><br><span class="line">        default: Date.now // 默认当前时间</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 创建一个集合构造函数</span><br><span class="line">const User = mongoose.model(&#x27;user&#x27;, userSchema);</span><br><span class="line">User.create(&#123;name: &#x27;wanggoudaner&#x27;&#125;).then(res =&gt; console.log(res))</span><br></pre></td></tr></table></figure></li></ol><h1 id="集合关联"><a href="#集合关联" class="headerlink" title="集合关联"></a>集合关联</h1><p>通常情况下， 不同的集合之间是有关系的； 例如文章信息和用户信息存储在不同的集合中； 但文章是某个用户发表的。 要查询文章所有的信息也包括了了作者的年龄，名字， 爱好等（用户信息）； 此时就需要用到集合关联。<br><img src="https://images.gitee.com/uploads/images/2021/1115/101619_b4348fc8_6525038.png" alt="输入图片说明" title="屏幕截图.png"><br>在文章集合中 的author字段 中 和用户集合的 _id 进行关联<br>***用popolate 进行关联</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 用户集合</span><br><span class="line">const User = mongoose.model(&#x27;User&#x27;, new mongoose.Schema(&#123;</span><br><span class="line">    name: &#123;type: String&#125;</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line">// 文章集合</span><br><span class="line">const Post = mongoose.model(&#x27;Post&#x27;, new mongoose.Schema(&#123;</span><br><span class="line">    title: &#123;type: String&#125;,</span><br><span class="line">    // 使用ID将文章集合和作者集合进行关联</span><br><span class="line">    author: &#123;type: mongoose.Schema.Types.ObjectId, ref: &#x27;user&#x27;&#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">// 插入字段 这里author 的id 是 user里面的 _id 值</span><br><span class="line">Post.create(&#123;title: &#x27;kuangren&#x27;, author: &#x27;618e04e5e4328b7a4c2ccad3&#x27;&#125;).then(result =&gt; console.log(result)).catch(err =&gt; console.log(err));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 联合查询 author 字段关联的集合</span><br><span class="line">Post.find()</span><br><span class="line">    .populate(&#x27;author&#x27;)</span><br><span class="line">    .then((err, result) =&gt; console.log(result));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websever</title>
      <link href="/2023/03/03/websever/"/>
      <url>/2023/03/03/websever/</url>
      
        <content type="html"><![CDATA[<h1 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h1><p>解决 搭建网站服务器，实现增删改查 这节中 因为大量字符串拼接过于繁琐，而且容易出错；</p><p>模板引擎是第三方模块；   让开发者已更加友好的方式拼接字符串； 更加容易维护</p><h1 id="art-template-模板引擎"><a href="#art-template-模板引擎" class="headerlink" title="art-template 模板引擎"></a>art-template 模板引擎</h1><ol><li>使用 npm install art-template 命令进行下载</li><li>使用const template &#x3D; require(‘art-template’); 引入模板引擎</li><li>告诉模板引擎 要拼接的数据和模板在哪  const html &#x3D; template(‘模板路径’， 数据)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art&#x27;</span>);</span><br><span class="line"><span class="comment">// 这里的后缀名.art 是固定的写法，这是模板引擎规定的； 但是里面还是写的html语法</span></span><br><span class="line"><span class="keyword">const</span> html = <span class="title function_">template</span>(<span class="string">&#x27;./views/index.art&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>，</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;     </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// views/index.art 模板代码</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123;data.name&#125;&#125; // data就是 template方法的第二个参数</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123;data.age&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><p>art-template 支持两种模板语法： 标准语法和原始语法。</p><ul><li>标准语法 可读性强</li><li>原始语法 逻辑性强</li></ul><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">标准语法 &#123;&#123; <span class="variable constant_">XXX</span> &#125;&#125;</span><br><span class="line">原始语法 &lt;%= 数据 %&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标准语法</span></span><br><span class="line">    &lt;h2&gt;&#123;&#123;value&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;a? b: c&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;a + b &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原始语法</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&lt;%= value %&gt;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&lt;%= a ? b: c %&gt;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&lt;%= a + b %&gt;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    &#123;% endraw %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="原文数据"><a href="#原文数据" class="headerlink" title="原文数据"></a>原文数据</h1><p>如果数据是HTML标签， 默认模板引擎不会解析标签， 回将其转义后输出。</p>+ 标准语法： {{@ 数据 }}+ 原始语法： <%- 数据 %><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标准语法</span></span><br><span class="line">        &lt;span&gt;</span><br><span class="line">            &#123;&#123;data.<span class="property">name</span>&#125;&#125; <span class="comment">// data就是 template方法的第二个参数</span></span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123;data.age&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;@ data.content &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//原始语法</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &lt;%= data.name %&gt; // data就是 template方法的第二个参数</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &lt;%= data.age %&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &lt;%= 1+1 %&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span> &lt;%- data.content %&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&#123;% endraw %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p>在模板中可以根据条件条件来决定显示哪块HTML代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标准语法</span></span><br><span class="line">    &#123;&#123;<span class="keyword">if</span> 条件&#125;&#125; ... &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line">    &#123;&#123;<span class="keyword">if</span> v1&#125;&#125;...&#123;&#123;elese <span class="keyword">if</span> v2&#125;&#125; ... &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;span&gt;</span><br><span class="line">            &#123;&#123;<span class="keyword">if</span> data.<span class="property">age</span> &gt; <span class="number">20</span>&#125;&#125;</span><br><span class="line">                我已经老了</span><br><span class="line">            &#123;&#123;<span class="keyword">else</span> <span class="keyword">if</span> data.<span class="property">age</span> &lt;= <span class="number">20</span>&#125;&#125;</span><br><span class="line">                我还很年轻</span><br><span class="line">            &#123;&#123; <span class="keyword">else</span>&#125;&#125;</span><br><span class="line">                年龄不符合要求</span><br><span class="line">            &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line">     &lt;/span&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原始语法</span></span><br><span class="line">    &lt;% <span class="keyword">if</span> (value) &#123; %&gt; ...... &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (v1) &#123; %&gt; ...... &lt;% &#125;  <span class="keyword">else</span> <span class="keyword">if</span> (v2) &#123; %&gt;  ...... &lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;% <span class="keyword">if</span>(data.<span class="property">age</span> &gt; <span class="number">20</span>) &#123; %&gt;</span><br><span class="line">            我是vn</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">        &lt;% <span class="keyword">if</span>(data.<span class="property">age</span> &lt;= <span class="number">20</span>) &#123;%&gt;</span><br><span class="line">            我是女枪</span><br><span class="line">        &lt;% &#125;  <span class="keyword">else</span> <span class="keyword">if</span> (data.<span class="property">age</span> &gt; <span class="number">20</span>) &#123; %&gt; </span><br><span class="line">            我是女警</span><br><span class="line">        &lt;% &#125; <span class="keyword">else</span>  &#123;%&gt;</span><br><span class="line">            年龄不符合要求 </span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &#123;% endraw %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="循环语法"><a href="#循环语法" class="headerlink" title="循环语法"></a>循环语法</h1>+ 标准语法 {{each 数据}} {{/each}}+ 原始语法 <% for() { %> <% } %><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标准语法</span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;&#123;each users&#125;&#125;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                <span class="comment">// 这里的$value 相当于个每个循环想。相当于forEach中的item</span></span><br><span class="line">                &#123;&#123;$value.<span class="property">name</span>&#125;&#125;</span><br><span class="line">                &#123;&#123;$value.<span class="property">age</span>&#125;&#125;</span><br><span class="line">                &#123;&#123;$value.<span class="property">sex</span>&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &#123;&#123;/each&#125;&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原始语法</span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;% <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; users.<span class="property">length</span>; i++) &#123; %&gt;</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &lt;%= users[i].name %&gt;</span></span><br><span class="line"><span class="language-xml">                    &lt;%= users[i].age %&gt;</span></span><br><span class="line"><span class="language-xml">                    &lt;%= users[i].sex %&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><h1 id="子模版"><a href="#子模版" class="headerlink" title="子模版"></a>子模版</h1><p>使用子模版可以将网站的公共区块（头部， 底部）抽离到单独的文件中。 抽离出的文件叫做子模版</p>+ 标准语法 {{include '子模板路径'}}+ 原始语法 <% include('子模版路径')%><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">    <span class="comment">// 标准语法</span></span><br><span class="line">    &#123;&#123; include <span class="string">&#x27;./header.art&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 原始语法</span></span><br><span class="line">   &lt;% <span class="title function_">include</span>(<span class="string">&#x27;./header.art&#x27;</span>) %&gt;</span><br><span class="line">    &#123;% endraw %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="模板的继承"><a href="#模板的继承" class="headerlink" title="模板的继承"></a>模板的继承</h1><p>模板继承可以将网站的HTML骨架抽离到单独的文件中， 其他页面模板可以继承 骨架文件;<br>HTML骨架 html 标签 body header标签； 这些不能用子模版语法生效； 所以需要继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽离出模板骨架</span></span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    // 用block 去创建一个插槽</span><br><span class="line">    &#123;&#123;block &#x27;header&#x27;&#125;&#125; &#123;&#123;/block&#125;&#125;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123;block &#x27;content&#x27;&#125;&#125; &#123;&#123;/block&#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> // 在其他文件中 继承，并填充这个骨架</span><br><span class="line"> &#123;&#123; extend &#x27;./layout.atr&#x27; &#125;&#125;</span><br><span class="line"> &#123;&#123; block &#x27;head&#x27;&#125;&#125; &lt;link rel=&quot;stylesheet&quot; href=&quot;custom.css&quot;&gt; &#123;&#123;/block&#125;&#125;</span><br><span class="line"> &#123;&#123; block &#x27;content&#x27; &#125;&#125; &lt;div&gt;我是填充内容&lt;/div&gt; &#123;&#123; /block &#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="模板配置"><a href="#模板配置" class="headerlink" title="模板配置"></a>模板配置</h1><ol><li><p>想模板中导入变量 template.defaults.imports.变量名 &#x3D; 变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>); </span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在模板中导入 cc变量名是 字符串&#x27;heel&#x27;</span></span><br><span class="line">template.<span class="property">defaults</span>.<span class="property">imports</span>.<span class="property">cc</span> = <span class="string">&#x27;heel&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> html = <span class="title function_">template</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;index.art&#x27;</span>), &#123;</span><br><span class="line">    <span class="attr">users</span>: [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&#x27;nan&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">22</span>,</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&#x27;nan&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;mali&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">24</span>,</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&#x27;nv&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  在index.art 中使用 cc变量</span></span><br><span class="line"></span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    &#123;&#123;cc&#125;&#125;</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>全局配置模板的根目录， 和设置axios 的 defaultBaseURL 差不多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置模板的根目录</span></span><br><span class="line">template.<span class="property">defaults</span>.<span class="property">root</span> = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里template 的第一个参数直接写要使用模板的文件名即可</span></span><br><span class="line"><span class="keyword">const</span> html = <span class="title function_">template</span>(<span class="string">&#x27;index.art&#x27;</span>, 数据)</span><br></pre></td></tr></table></figure></li><li><p>设置模板默认后缀 template.defaults.extname &#x3D; “.art”;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置模板默认后缀 </span></span><br><span class="line">template.<span class="property">defaults</span>.<span class="property">extname</span> = <span class="string">&quot;.art&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置模板的根目录</span></span><br><span class="line">template.<span class="property">defaults</span>.<span class="property">root</span> = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里由于已经设置了根目录和默认后缀， 那么只需要写index即可不需要 写成 index.art</span></span><br><span class="line"><span class="keyword">const</span> html = <span class="title function_">template</span>(<span class="string">&#x27;index&#x27;</span>, 数据)</span><br></pre></td></tr></table></figure><p>*** 查看 4ce8adf 提交记录 ***<br>&#x2F;&#x2F; 搭建网站服务器, 实现增删改查 实现客户端和服务器的通信,<br>&#x2F;&#x2F; 连接数据库, 创建用户集合, 向集合中插入文档,<br>&#x2F;&#x2F; 当用户访问&#x2F;list时, 将所有用户信息查询出来<br>&#x2F;&#x2F; 将用户信息和表格HTML进行拼接并将拼接结果响应回客户端<br>&#x2F;&#x2F; 当用户访问&#x2F;add时, 呈现表单页面, 并实现添加用户信息功能</p><p> &#x2F;&#x2F; 1. 增加页面路由 呈现页面<br> &#x2F;&#x2F; 点击修改时 根据点击的id 将id传递到当前页面<br> &#x2F;&#x2F; 从数据库中查询当前用户信息, 将用户信息展示到页面<br> &#x2F;&#x2F; 2. 实现用户修改功能<br> &#x2F;&#x2F; 1. 指定表单的体骄傲地址以及请求方式<br> &#x2F;&#x2F; 2. 接受客户端传递过来的修改信息 找到用户， 将用户信息改为最新的信息</p></li></ol><p>&#x2F;&#x2F; 当用户访问&#x2F;modify时, 呈现修改页面, 并实现修改用户信息功能<br>&#x2F;&#x2F; 当用户访问&#x2F;delete时, 实现用户删除功能</p><p>&#x2F;&#x2F; ****<br>&#x2F;&#x2F; 用模板引擎解决字符串拼接的问题<br>&#x2F;&#x2F; ****</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> queryString = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./model/index&#x27;</span>); <span class="comment">// 引入数据库连接</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = <span class="built_in">require</span>(<span class="string">&#x27;./model/user&#x27;</span>); <span class="comment">// 引入用户构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = http.<span class="title function_">createServer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为服务器对象添加请求事件</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 请求方式</span></span><br><span class="line">    <span class="keyword">const</span> method = req.<span class="property">method</span>;</span><br><span class="line">    <span class="comment">// console.log(req)</span></span><br><span class="line">    <span class="keyword">const</span> &#123;pathname, query&#125; = url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pathname === <span class="string">&#x27;/list&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 查找数据库</span></span><br><span class="line">            <span class="keyword">let</span> users = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">find</span>()</span><br><span class="line">            <span class="comment">// 如是访问地址时list, 那么呈现列表页面</span></span><br><span class="line">            <span class="keyword">let</span> list = <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">                &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;head&gt;</span></span><br><span class="line"><span class="string">                    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">                &lt;/head&gt;</span></span><br><span class="line"><span class="string">                &lt;body&gt;</span></span><br><span class="line"><span class="string">                    </span></span><br><span class="line"><span class="string">            `</span>;</span><br><span class="line">            users.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                list += <span class="string">`</span></span><br><span class="line"><span class="string">                    &lt;h1&gt;</span></span><br><span class="line"><span class="string">                        我是<span class="subst">$&#123;item.name&#125;</span>, 我今年<span class="subst">$&#123;item.age&#125;</span>了,</span></span><br><span class="line"><span class="string">                        我的email是<span class="subst">$&#123;item.email&#125;</span>;</span></span><br><span class="line"><span class="string">                        我的爱好</span></span><br><span class="line"><span class="string">                `</span>;</span><br><span class="line">                item.<span class="property">hobbies</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    list += <span class="string">`<span class="subst">$&#123;item&#125;</span>,`</span></span><br><span class="line">                &#125;)</span><br><span class="line">                list += <span class="string">`</span></span><br><span class="line"><span class="string">                    &lt;a href=&quot;&quot; &gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">                    &lt;a href=&quot;/modify?id=<span class="subst">$&#123;item._id&#125;</span>&quot; &gt;修改&lt;/a&gt;</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">                &lt;/h1&gt;&lt;hr/&gt;`</span></span><br><span class="line">            &#125;)</span><br><span class="line">            list += <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;/body&gt;</span></span><br><span class="line"><span class="string">            &lt;/html&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">            res.<span class="title function_">end</span>(list)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">&quot;/add&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> list = <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">            &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;head&gt;</span></span><br><span class="line"><span class="string">                &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">            &lt;/head&gt;</span></span><br><span class="line"><span class="string">            &lt;body&gt;</span></span><br><span class="line"><span class="string">                &lt;h1&gt;</span></span><br><span class="line"><span class="string">                    我是html</span></span><br><span class="line"><span class="string">                &lt;/h1&gt;</span></span><br><span class="line"><span class="string">                &lt;button&gt;</span></span><br><span class="line"><span class="string">                    添加用户</span></span><br><span class="line"><span class="string">                &lt;/button&gt;</span></span><br><span class="line"><span class="string">                &lt;form method=&quot;post&quot; action=&quot;/add&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;label for=&quot;&quot;&gt;名字&lt;/label&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;label for=&quot;&quot;&gt;年龄&lt;/label&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;number&quot; name=&quot;age&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;label for=&quot;&quot;&gt;邮箱&lt;/label&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;email&quot; name=&quot;email&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;label for=&quot;&quot;&gt;爱好&lt;/label&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; id=&quot;&quot; value=&quot;足球&quot;&gt;足球</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; id=&quot;&quot; value=&quot;睡觉&quot;&gt;睡觉</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; id=&quot;&quot; value=&quot;吃饭&quot;&gt;吃饭</span></span><br><span class="line"><span class="string">                    &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span></span><br><span class="line"><span class="string">                &lt;/from&gt;</span></span><br><span class="line"><span class="string">            &lt;/body&gt;</span></span><br><span class="line"><span class="string">            &lt;/html&gt;</span></span><br><span class="line"><span class="string">            `</span>;</span><br><span class="line">            res.<span class="title function_">end</span>(list)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">&#x27;/modify&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// ****</span></span><br><span class="line">            <span class="comment">// query 时url.parse(req.url, true) 第二个参数传true 返回一个对象可以得到id</span></span><br><span class="line">            <span class="comment">// ****</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(query.<span class="property">id</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在数据库中拿到数据</span></span><br><span class="line">            <span class="keyword">let</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">_id</span>: query.<span class="property">id</span>&#125;);</span><br><span class="line">            <span class="keyword">let</span> hobbies = [<span class="string">&quot;足球&quot;</span>, <span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>];</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(user)</span><br><span class="line">            <span class="keyword">let</span> modify = <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">            &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;head&gt;</span></span><br><span class="line"><span class="string">                &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">            &lt;/head&gt;</span></span><br><span class="line"><span class="string">            &lt;body&gt;</span></span><br><span class="line"><span class="string">                &lt;h1&gt;</span></span><br><span class="line"><span class="string">                    我是html</span></span><br><span class="line"><span class="string">                &lt;/h1&gt;</span></span><br><span class="line"><span class="string">                &lt;button&gt;</span></span><br><span class="line"><span class="string">                    修改用户</span></span><br><span class="line"><span class="string">                &lt;/button&gt;</span></span><br><span class="line"><span class="string">                &lt;form method=&quot;post&quot; action=&quot;/modify?id=<span class="subst">$&#123;user._id&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;label for=&quot;&quot;&gt;名字&lt;/label&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;<span class="subst">$&#123;user.name&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;label for=&quot;&quot;&gt;年龄&lt;/label&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;number&quot; name=&quot;age&quot; value=&quot;<span class="subst">$&#123;user.age&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;label for=&quot;&quot;&gt;邮箱&lt;/label&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;email&quot; name=&quot;email&quot; value=&quot;<span class="subst">$&#123;user.email&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;label for=&quot;&quot;&gt;爱好&lt;/label&gt;</span></span><br><span class="line"><span class="string">                   </span></span><br><span class="line"><span class="string">                   </span></span><br><span class="line"><span class="string">            `</span>;</span><br><span class="line">            <span class="comment">// 用所有爱好去循环 user对象；</span></span><br><span class="line">            <span class="comment">// 如果包含了 那么就添加 checked 属性</span></span><br><span class="line">            hobbies.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> isHobby = user.<span class="property">hobbies</span>.<span class="title function_">includes</span>(item);</span><br><span class="line">                <span class="keyword">if</span> (isHobby) &#123;</span><br><span class="line">                    modify += <span class="string">`&lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; id=&quot;&quot; value=&quot;<span class="subst">$&#123;item&#125;</span>&quot; checked&gt;<span class="subst">$&#123;item&#125;</span>`</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    modify += <span class="string">`&lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; id=&quot;&quot; value=&quot;<span class="subst">$&#123;item&#125;</span>&quot; &gt;<span class="subst">$&#123;item&#125;</span>`</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            modify += <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;button type=&quot;submit&quot;&gt;修改用户&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/from&gt;</span></span><br><span class="line"><span class="string">            &lt;/body&gt;</span></span><br><span class="line"><span class="string">            &lt;/html&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">            res.<span class="title function_">end</span>(modify)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(pathname === <span class="string">&#x27;/add&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">            <span class="keyword">let</span> formData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="comment">// 接受post参数</span></span><br><span class="line">            req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">                formData += params</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// post参数接受完毕</span></span><br><span class="line">            req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(formData)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(queryString.<span class="title function_">parse</span>(formData));</span><br><span class="line">                <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>(queryString.<span class="title function_">parse</span>(formData));</span><br><span class="line">                <span class="comment">// **** </span></span><br><span class="line">                <span class="comment">// 添加成功重定向到 /list 地址</span></span><br><span class="line">                <span class="comment">// 301 表示重定向</span></span><br><span class="line">                <span class="comment">// ****</span></span><br><span class="line">                res.<span class="title function_">writeHead</span>(<span class="number">301</span>, &#123;</span><br><span class="line">                    <span class="attr">location</span>: <span class="string">&#x27;/list&#x27;</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">&#x27;/modify&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> formData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="comment">// 接受post参数</span></span><br><span class="line">            req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">                formData += params</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// post参数接受完毕</span></span><br><span class="line">            req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(formData)</span><br><span class="line">                <span class="comment">// console.log(queryString.parse(formData));</span></span><br><span class="line">                <span class="comment">// 用queryString 可以拿到post请求的参数</span></span><br><span class="line">                <span class="keyword">let</span> user = queryString.<span class="title function_">parse</span>(formData);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// updateOne 第一个参数是查询条件， 第二个参数是呀修改的数据</span></span><br><span class="line">                <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">updateOne</span>(&#123;<span class="attr">_id</span>: query.<span class="property">id</span>&#125;, user);</span><br><span class="line">                <span class="comment">// **** </span></span><br><span class="line">                <span class="comment">// 添加成功重定向到 /list 地址</span></span><br><span class="line">                <span class="comment">// 301 表示重定向</span></span><br><span class="line">                <span class="comment">// ****</span></span><br><span class="line">                res.<span class="title function_">writeHead</span>(<span class="number">301</span>, &#123;</span><br><span class="line">                    <span class="attr">location</span>: <span class="string">&#x27;/list&#x27;</span></span><br><span class="line">                &#125;)</span><br><span class="line">                res.<span class="title function_">end</span>()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> 网站服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> py</title>
      <link href="/2023/02/28/py/"/>
      <url>/2023/02/28/py/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2023/02/28/webpack/"/>
      <url>/2023/02/28/webpack/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react</title>
      <link href="/2023/02/28/react/"/>
      <url>/2023/02/28/react/</url>
      
        <content type="html"><![CDATA[<h1 id="react-基础"><a href="#react-基础" class="headerlink" title="react 基础"></a>react 基础</h1><h1 id="react-项目创建"><a href="#react-项目创建" class="headerlink" title="react 项目创建"></a>react 项目创建</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">    </span><br><span class="line">npm i -g create-react-app <span class="comment">// 全局下载 create-react-app 脚手架工具</span></span><br><span class="line"></span><br><span class="line">D:  <span class="comment">//进入D盘</span></span><br><span class="line">mkdir ReactDemo  <span class="comment">//创建ReactDemo文件夹</span></span><br><span class="line">create-react-app demo01   <span class="comment">//用脚手架创建React项目</span></span><br><span class="line">cd demo01   <span class="comment">//等创建完成后，进入项目目录</span></span><br><span class="line">npm start   <span class="comment">//预览项目，如果能正常打开，说明项目创建成功</span></span><br></pre></td></tr></table></figure><h1 id="第一个组件"><a href="#第一个组件" class="headerlink" title="第一个组件"></a>第一个组件</h1><p>再src 下新建一个index.js 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import ReactDOM from &#x27;react-dom&#x27;</span><br><span class="line">import App from &#x27;./App&#x27;</span><br><span class="line">ReactDOM.render(&lt;App /&gt;,document.getElementById(&#x27;root&#x27;))</span><br></pre></td></tr></table></figure><p>目前App组件还没有的，需要一会建立</p><p>App组件的编写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">class App extends Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                Hello JSPang</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h1 id="JSX简介"><a href="#JSX简介" class="headerlink" title="JSX简介"></a>JSX简介</h1><p>JSX是js和XML结合的一种格式。 React发明了JSX，可以方便HTML语法来创建虚拟DOM， 遇到&lt;, JSX解析为HTML， 遇到{ 就当js解析</p><h2 id="组件和普通JSX语法区别"><a href="#组件和普通JSX语法区别" class="headerlink" title="组件和普通JSX语法区别"></a>组件和普通JSX语法区别</h2><p>组件首字母大写，JSX是小写字母开头</p><h2 id="JSX中使用js语法，-使用三元表达式"><a href="#JSX中使用js语法，-使用三元表达式" class="headerlink" title="JSX中使用js语法， 使用三元表达式"></a>JSX中使用js语法， 使用三元表达式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">const Component = React.Component</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class App extends Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;ul className=&quot;my-list&quot;&gt;</span><br><span class="line">                &lt;li&gt;&#123;false?&#x27;JSPang.com&#x27;:&#x27;技术胖&#x27;&#125;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;I love React&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h1 id="Frament-标签"><a href="#Frament-标签" class="headerlink" title="Frament 标签"></a>Frament 标签</h1><p>加上最外层的DIV，组件就是完全正常的，但是你的布局就偏不需要这个最外层的标签怎么办?比如我们在作<code>Flex</code>布局的时候,外层还真的不能有包裹元素。这种矛盾其实React16已经有所考虑了，为我们准备了<code>&lt;Fragment&gt;</code>标签。</p><p>要想使用<code>&lt;Fragment&gt;</code>，需要先进行引入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;<span class="title class_">Component</span>,<span class="title class_">Fragment</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br></pre></td></tr></table></figure><p>然后把最外层的<code>&lt;div&gt;</code>标签，换成<code>&lt;Fragment&gt;</code>标签，代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;<span class="title class_">Component</span>,<span class="title class_">Fragment</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Xiaojiejie</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>  (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> /&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span> 增加服务 <span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                   <span class="tag">&lt;<span class="name">li</span>&gt;</span>头部按摩<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                   <span class="tag">&lt;<span class="name">li</span>&gt;</span>精油推背<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Xiaojiejie</span> </span><br></pre></td></tr></table></figure><p>这时候你再去浏览器的<code>Elements</code>中查看，就回发现已经没有外层的包裹了。</p><h1 id="响应式设计和数据绑定"><a href="#响应式设计和数据绑定" class="headerlink" title="响应式设计和数据绑定"></a>响应式设计和数据绑定</h1><p><code>React</code>不建议你直接操作<code>DOM</code>元素,而是要通过数据进行驱动，改变界面中的效果。React会根据数据的变化，自动的帮助你完成界面的改变。所以在写React代码时，你无需关注DOM相关的操作，只需要关注数据的操作就可以了（这也是React如此受欢迎的主要原因，大大加快了我们的开发速度）。</p><p>。数据定义在<code>组件中的构造函数里</code>constructor&#96;。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js的构造函数，由于其他任何函数执行</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(props) <span class="comment">//调用父类的构造函数，固定写法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">        <span class="attr">inputValue</span>:<span class="string">&#x27;&#x27;</span> , <span class="comment">// input中的值</span></span><br><span class="line">        <span class="attr">list</span>:[]    <span class="comment">//服务列表</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>React</code>中的数据绑定和<code>Vue</code>中几乎一样，也是采用<code>字面量</code>(我自己起的名字)的形式，就是使用<code>&#123;&#125;</code>来标注，其实这也算是js代码的一种声明。比如现在我们要把<code>inputValue</code>值绑定到<code>input</code>框中，只要写入下面的代码就可以了。其实说白了就是在JSX中使用js代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.inputValue&#125;</span> /&gt;</span> </span><br></pre></td></tr></table></figure><p>现在需要看一下是不是可以实现绑定效果，所以把<code>inputValue</code>赋予一个’jspang’，然后预览看一下效果。在这里我们并没有进行任何的<code>DOM</code>操作，但是界面已经发生了变化，这些都时<code>React</code>帮我们作的，它还会自动感知数据的变化。</p><p><a href="https://jspang.com/detailed?id=46#toc333">绑定事件</a></p><p>这时候你到界面的文本框中去输入值，是没有任何变化的，这是因为我们强制绑定了<code>inputValue</code>的值。如果要想改变，需要绑定<strong>响应事件</strong>，改变<code>inputValue</code>的值。比如绑定一个改变事件，这个事件执行<code>inputChange()</code>(当然这个方法还没有)方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.inputValue&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.inputChange&#125;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>现在还没有<code>inputChange()</code>这个方法，在<code>render()</code>方法的下面建立一个<code>inputChange()</code>方法，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inputChange(e)&#123;</span><br><span class="line">       console.log(e);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这时候会发现响应事件可以使用了，但是如何获得我们输入的值那，程序中输入下面的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">inputChange</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候控制台是可以打印出输入的值的，视频中会有演示。看到获得了输入的值，想当然的认为直接改变<code>inputValue</code>的值就可以了(错的).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">inputChange</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">inputValue</span>=e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完后再进行预览，会发现程序直接报错了（加项服务还真的有点难度哦,大宝剑不好作的………..）。</p><p>其实我们范了两个错误：</p><ol><li>一个是<code>this</code>指向不对，你需要重新用<code>bind</code>设置一下指向(ES6的语法)。</li><li>另一个是<code>React</code>中改变值需要使用<code>this.setState</code>方法。</li></ol><p>第一个错误很好解决，直接再<code>JSX</code>部分，利用<code>bind</code>进行绑定就好。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=&#123;this.state.inputValue&#125; onChange=&#123;this.inputChange.bind(this)&#125; /&gt;</span><br></pre></td></tr></table></figure><p>这步做完，我们还需要加入<code>setState</code>方法，改变值。代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">inputChange</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="comment">// console.log(e.target.value);</span></span><br><span class="line">    <span class="comment">// this.state.inputValue=e.target.value;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">inputValue</span>:e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在测试一下，输入框可以改变值了，其实这节课很重要，里边设计了<code>React</code>的重要思想，建议这节课可以反复多看两遍，虽然不难，但是这是一个最基本的思想的转变。下节课可要真的增加服务项目了。</p><h1 id="循环渲染列表"><a href="#循环渲染列表" class="headerlink" title="循环渲染列表"></a>循环渲染列表</h1><p>如何根据多个数据动态显示多个li标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">constructor(props)&#123;</span><br><span class="line">    super(props) //调用父类的构造函数，固定写法</span><br><span class="line">    this.state=&#123;</span><br><span class="line">        inputValue:&#x27;jspang&#x27; , // input中的值</span><br><span class="line">        //----------主要 代码--------start</span><br><span class="line">        list:[&#x27;基础按摩&#x27;,&#x27;精油推背&#x27;]   </span><br><span class="line">        //----------主要 代码--------end</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了数据list之后，可以再jsx部分进行循环输出。代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Frament</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.inputValue&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.inputChange.bind(this)&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>增值服务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             &#123;</span></span><br><span class="line"><span class="language-xml">                    this.state.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                        return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#125;)</span></span><br><span class="line"><span class="language-xml">                &#125;     </span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Frament</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成上面的步骤，数据就不再是固定的了，而是动态管理的，也为我们接下来的添加打下了基础，剩下的步骤也显得很简单了</p><h1 id="解决key值错误"><a href="#解决key值错误" class="headerlink" title="解决key值错误"></a>解决key值错误</h1><p>。这个错误的大概意思就是缺少<code>key值</code>。就是在用map循环时，需要设置一个不同的值，这个时React的要求。我们可以暂时用<code>index+item</code>的形式来实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        this.state.list.map((item,index)=&gt;&#123;</span><br><span class="line">            return &lt;li key=&#123;index+item&#125;&gt;&#123;item&#125;&lt;/li&gt;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/ul&gt;  </span><br></pre></td></tr></table></figure><h1 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h1><p>获得了数据下标后,删除数据就变的容易起来.先声明一个局部变量,然后利用传递过来的下标,删除数组中的值.删除后用<code>setState</code>更新数据就可以了.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除单项服务</span></span><br><span class="line"><span class="title function_">deleteItem</span>(<span class="params">index</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> list = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span></span><br><span class="line">    list.<span class="title function_">splice</span>(index,<span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">list</span>:list</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这里边是有一个坑的,有的小伙伴肯定会认为下面的代码也是正确的.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除单项服务</span></span><br><span class="line"><span class="title function_">deleteItem</span>(<span class="params">index</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>) <span class="comment">// 这里直接删除是有问题的</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">list</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span></span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记住React是禁止直接操作state的,虽然上面的方法也管用,但是在后期的性能优化上会有很多麻烦,所以一定不要这样操作.这也算是我<code>React</code>初期踩的比较深的一个坑,希望小伙伴们可以跳坑.</p><h1 id="JSX-几个坑"><a href="#JSX-几个坑" class="headerlink" title="JSX 几个坑"></a>JSX 几个坑</h1><ol><li><p>注释的写法要再{} 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//第一次写注释，这个是错误的</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;input value=&#123;this.state.inputValue&#125; onChange=&#123;this.inputChange.bind(this)&#125; /&gt;</span><br><span class="line">    &lt;button onClick=&#123;this.addList.bind(this)&#125;&gt; 增加服务 &lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;/* 正确注释的写法 */&#125;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;input value=&#123;this.state.inputValue&#125; onChange=&#123;this.inputChange.bind(this)&#125; /&gt;</span><br><span class="line">    &lt;button onClick=&#123;this.addList.bind(this)&#125;&gt; 增加服务 &lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>class 的写法 要用className 而不是 class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 错误写法</span><br><span class="line">&lt;input class=&quot;input&quot; value=&#123;this.state.inputValue&#125;  /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 正确写法 使用className</span><br><span class="line">&lt;input className=&quot;input&quot; value=&#123;this.state.inputValue&#125;  /&gt;</span><br></pre></td></tr></table></figure></li><li><p>html 解析问题， 如果我们想再文本input 中输入 <h1></h1> 并进行渲染， 是不会生效的</p><p>， 可以使用 dangerouslySetInnerHTML 属性解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;</span><br><span class="line">      this.state.list.map((item, index) =&gt; &#123;</span><br><span class="line">          return &lt;li key=&#123;index+item&#125; onClick=&#123;this.deleteItem.bind(this, index)&#125; dangerouslySetInnerHTML=&#123;&#123;__html:item&#125;&#125;&gt;&lt;/li&gt;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">         &lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210629161829926.png" alt="image-20210629161829926"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210629161850386.png" alt="image-20210629161850386"></p></li><li><p>关于label 也是个不小的坑</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>加入服务：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&quot;input&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.inputValue&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.inputChange.bind(this)&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addList.bind(this)&#125;</span>&gt;</span> 增加服务 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>我们如果想 点击加入服务时 也input 框进行聚焦的话， 按照之前html 的思路 只需要使用 id； 即：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;jspang&quot;</span>&gt;</span>加入服务：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;jspang&quot;</span> <span class="attr">className</span>=<span class="string">&quot;input&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.inputValue&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.inputChange.bind(this)&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addList.bind(this)&#125;</span>&gt;</span> 增加服务 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>** 但是这个再jsx 中时会报错的， 会提示你使用htmlFor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;label htmlFor=&quot;jspang&quot;&gt;加入服务：&lt;/label&gt;</span><br><span class="line">    &lt;input id=&quot;jspang&quot; className=&quot;input&quot; value=&#123;this.state.inputValue&#125; onChange=&#123;this.inputChange.bind(this)&#125; /&gt;</span><br><span class="line">    &lt;button onClick=&#123;this.addList.bind(this)&#125;&gt; 增加服务 &lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="simple-React-Snippets-插件"><a href="#simple-React-Snippets-插件" class="headerlink" title="simple React Snippets 插件"></a>simple React Snippets 插件</h1><p>imrc 快速引入语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br></pre></td></tr></table></figure><p>cc  快速生成以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class  extends Component &#123;</span><br><span class="line">    state = &#123;  &#125;</span><br><span class="line">    render() &#123; </span><br><span class="line">        return (  );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ;</span><br></pre></td></tr></table></figure><h1 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h1><h2 id="父组件向子组件传值：-靠属性的方式进行传值"><a href="#父组件向子组件传值：-靠属性的方式进行传值" class="headerlink" title="父组件向子组件传值： 靠属性的方式进行传值"></a>父组件向子组件传值： 靠属性的方式进行传值</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123; <span class="comment">// 父组件中</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">son</span> <span class="attr">content</span> = <span class="string">&#123;a&#125;</span>&gt;</span> // 利用 content 属性 传递值时 a 的值 </span></span><br><span class="line"><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 子组件中</span></span><br><span class="line"><span class="language-xml">class Son extends Component &#123;</span></span><br><span class="line"><span class="language-xml">render() &#123;</span></span><br><span class="line"><span class="language-xml">return &#123; // 在子组件中就可以直接拿到porps 中的 content</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;this.props.content&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">export default Son</span></span><br></pre></td></tr></table></figure><h2 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h2><p>因为react规定，子组件不能直接操作父组件里的数据， 所以要借助一个父组件的方法 deleteOne（也就是将父组件的deleteOne方法传递给子组件）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123; <span class="comment">// 在子组件中就可以直接拿到porps 中的 content</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span> &#123;this.props.content&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">deleteItem</span>(<span class="number">1</span>) <span class="comment">// 这里执行deleteItem 其实就是执行父组件的 deleteOne 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Son</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123; <span class="comment">// 父组件中</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">son</span> <span class="attr">content</span> = <span class="string">&#123;a&#125;</span> <span class="attr">deleteItem</span>=<span class="string">&#123;this.deleteOne&#125;</span>&gt;</span> // 利用 deleteItem 属性 传递 方法给子组件 </span></span><br><span class="line"><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">    deleteOne(val) &#123;</span></span><br><span class="line"><span class="language-xml">        this.setState(&#123; // val就是1</span></span><br><span class="line"><span class="language-xml">            a: val</span></span><br><span class="line"><span class="language-xml">        &#125;)</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**** react中state改变了，组件才会update。</span></span><br><span class="line"><span class="language-xml">1. 父写好state和处理该state的函数，同时将函数名通过props属性值的形式传入子，</span></span><br><span class="line"><span class="language-xml">2. 子调用父的函数可以进行传递数据，同时引起state变化</span></span><br></pre></td></tr></table></figure><h1 id="react-单项数据流"><a href="#react-单项数据流" class="headerlink" title="react 单项数据流"></a>react 单项数据流</h1><p>对于父子间传递过来的数据， 子组件只能读取， 不能进行修改；</p><h1 id="PropTypes-应用"><a href="#PropTypes-应用" class="headerlink" title="PropTypes 应用"></a>PropTypes 应用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">improt PropTypes from &#x27;prop-types&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class XiaojiejieItem extends Component &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PropTypes 用来限制从父组件传递过来的数据类型；因为大型项目，如果你不校验，后期会变的异常混乱，业务逻辑也没办法保证。</span><br><span class="line">XiaojiejieItem.propTypes = &#123; </span><br><span class="line">content: PropTypes.string,</span><br><span class="line">deleteItem: PropTypes.func,</span><br><span class="line">index: PropTypes.number.isRequired // 表示必须做</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 默认值 props ： 表示如果我们没有传递属性值， 可以默认给一个值</span><br><span class="line"></span><br><span class="line">XiaojiejieItem.defaultProps = &#123;</span><br><span class="line">avname: &#x27;松岛枫&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ref-的使用"><a href="#ref-的使用" class="headerlink" title="ref 的使用"></a>ref 的使用</h1><p>再编写组件方法时， 经常会遇到语义化很模糊的代码，这对于review 或者合作开发 是很不友好的。 或者当核心成员离开时， 项目甚至会面临倒闭的问题。 我们必须重视react 代码中的语义话。 ref 是个不错的工具</p><ol><li><p>代替原来的e.target.value</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">inputChange</span>(<span class="params">e</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line"><span class="attr">inputValue</span>: e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">/*使用ref进行， 现在jsx中进行绑定，使用es6语法*/</span>&#125;；</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;&quot;</span> value=&#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">inputValue</span>&#125;</span><br><span class="line">onChange=&#123;<span class="variable language_">this</span>.<span class="property">inputChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)&#125;</span><br><span class="line">ref=&#123;<span class="function">(<span class="params">input</span>) =&gt;</span> &#123;<span class="variable language_">this</span>.<span class="property">input</span> = input&#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ref语义话绑定后的 方法代码</span></span><br><span class="line"><span class="title function_">inputChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">inputValue</span>: <span class="variable language_">this</span>.<span class="property">input</span>.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="ref的坑，-setState-是一个异步函数"><a href="#ref的坑，-setState-是一个异步函数" class="headerlink" title="ref的坑， setState 是一个异步函数"></a>ref的坑， setState 是一个异步函数</h1><p><a href="https://jspang.com/detailed?id=46#toc367"><code>ref</code>使用中的坑</a></p><p>比如现在我们要用ref绑定取得要服务的数量，可以先用<code>ref</code>进行绑定。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul ref=&#123;<span class="function">(<span class="params">ul</span>)=&gt;</span>&#123;<span class="variable language_">this</span>.<span class="property">ul</span>=ul&#125;&#125;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">XiaojiejieItem</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">key</span>=<span class="string">&#123;index+item&#125;</span>  </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">content</span>=<span class="string">&#123;item&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">index</span>=<span class="string">&#123;index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">deleteItem</span>=<span class="string">&#123;this.deleteItem.bind(this)&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                /&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/ul&gt;  </span><br></pre></td></tr></table></figure><p>绑定后可以在<code>addList()</code>方法中，获取当前<code>&lt;div&gt;</code>的值.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title function_">addList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">list</span>:[...<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>,<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">inputValue</span>],</span><br><span class="line">        <span class="attr">inputValue</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//关键代码--------------start</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">ul</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">length</span>)</span><br><span class="line">    <span class="comment">//关键代码--------------end</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候你打开控制台，点击添加服务按钮，你会返现数量怎么少一个？（就是这个坑），其实这个坑是因为React中更多<code>setState</code>是一个异步函数所造成的。也就是这个<code>setState</code>，代码执行是有一个时间的，如果你真的想了解清楚，你需要对什么是虚拟DOM有一个了解。简单的说，就是因为是异步，还没等虚拟Dom渲染，我们的<code>console.log</code>就已经执行了。</p><p>那这个代码怎么编写才会完全正常那，其实<code>setState</code>方法提供了一个回调函数，也就是它的第二个函数。下面这样写就可以实现我们想要的方法了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">list</span>:[...<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>,<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">inputValue</span>],</span><br><span class="line">        <span class="attr">inputValue</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment">//关键代码--------------start</span></span><br><span class="line">    &#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">ul</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">length</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//关键代码--------------end</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在到浏览器中查看代码，就完全正常了。这节课主要学习了<code>ref</code>的用法和<code>ref</code>中的坑。学完后练习一下吧，代码这东西，不练习你是学不会的。</p><h1 id="React-的生命周期"><a href="#React-的生命周期" class="headerlink" title="React 的生命周期"></a>React 的生命周期</h1><ul><li><p>四个阶段</p><ol><li>初始化阶段： initialization</li><li>挂载阶段：mounting : componentWillMount、 render、 componentDidMount</li><li>更新阶段：updating : shouldCompoentUpdate、 componentWillUpdate、 componentDidUpdate、 componentWillReceiveProps</li><li>销毁阶段: unmounting</li></ol></li><li><p>什么是生命周期函数： 在某个时刻组件会自动调用执行的函数</p><p>例如： render 函数就是一个生命周期函数， 它会在state 发生改变时自动执行</p></li><li><p>mounting 阶段 叫做挂载阶段， 伴随这整个虚拟DOM的生成， 它里面有三个小的生命周期函数， 分别是</p><ol><li><p>componentWillMount: 组件即将被挂载到页面的时刻执行。</p></li><li><p>render: 页面state或props发生改变时执行。</p></li><li><p>componentDidMount: 组件挂载完成时执行。</p><ul><li><p>注意：</p><p>componentWillMount 和 componentDIdMout 这两个生命周期函数， 只在页面中刷新时执行一次，而render 只要在 state 和 props 变化就会执行</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210630095759823.png" alt="image-20210630095759823"></p></li></ul></li></ol></li><li><p>updating 阶段 组件发生改变更新的阶段：  有两个基本的部分引发更新： 1. props 属性改变， 2. state状态改变</p><ol><li><p>shouldComponentUpdate 在组件更新之前， 自动执行。 这个函数必须要求返回一个boolean 值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">// nextProps 表示下一个props的值</span><br><span class="line">// nextstate 表示下一个state的值</span><br><span class="line">// 当props 改变或者 state 改变 react 会渲染整个组件；</span><br><span class="line">if (nextProps.title === this.props.title) &#123;</span><br><span class="line">return false // 如果两次title 相同没必要去进行渲染 浪费性能</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回true 同意组件更新 </span><br><span class="line">// 返回false 不同一组件更新</span><br></pre></td></tr></table></figure><p>如果返回false 那么组件就不会执行componentWillUpdate函数</p></li><li><p>componentWillUpdate 函数， 也发生在组件更新之前执行， 但在shouldComponentUpdate之后 执行。如果 shouldComponentUpdate 返回false ， 这个函数就不会执行</p></li><li><p>componentDidUpdate 函数， 在组件更新之后执行，</p></li><li><p>compoentWillReceiveProps</p><p>这个函数如果是顶层组件 那么就不执行； 如果是子组件， 那么接受到父组件传递过来的参数，此时</p><p><code> 父组件render函数执行时，这个函数也会被执行。简单说这个函数执行取决于父组件的是否更新</code></p></li></ol></li><li><p>销毁阶段</p><ol><li>componentWillUnmount 函数， 当组件从页面中删除的时候执行</li></ol></li></ul><h1 id="npm-install-xxx-和-npm-install-xxx-g-、-npm-i-xxx-–save、-npm-i-xxx-–save-dev-的区别"><a href="#npm-install-xxx-和-npm-install-xxx-g-、-npm-i-xxx-–save、-npm-i-xxx-–save-dev-的区别" class="headerlink" title="npm install  xxx  和 npm install xxx -g  、 npm i xxx –save、 npm i xxx –save-dev 的区别"></a>npm install  xxx  和 npm install xxx -g  、 npm i xxx –save、 npm i xxx –save-dev 的区别</h1><ol><li>npm i xxx 安装第三方包到项目目录下， 不会将模块依赖写入 devDependence 和 dependencies </li><li>npm i xxx -g ： 安装包到磁盘中， 具体在哪个磁盘要看 npm cinfig prefix 的位置</li><li>npm i –save xxx:  –save 的意思是将模块安装到项目目录下并在dependencies 写入， 运行依赖</li><li>npm i –save-dev xxx: –save-dev 会安装在项目目录下 并在devDenpendencies 写入 开发依赖</li></ol><h1 id="安装-react-transition-group"><a href="#安装-react-transition-group" class="headerlink" title="安装 react-transition-group"></a>安装 react-transition-group</h1><ol><li><p>首先进行安装模块 npm install react-transition-group –savae</p><p>这个模块有三个核心库 Transiton CssTransition TransitonGroup</p></li><li><p>使用CssTransition</p><ul><li><p>引入 import {CssTransition} from ‘react-transition-group’;</p></li><li><p>&#96;&#96;&#96;<br>render() {<br>return (<br>    <div><br>        &lt;CSSTransition &#x2F;&#x2F;这里使用csstransition 进行包裹 <div>BOSS级人物-孙悟空</div><br>            in&#x3D;{this.state.isShow}   &#x2F;&#x2F;用于判断是否出现的状态<br>            timeout&#x3D;{2000}           &#x2F;&#x2F;动画持续时间<br>            classNames&#x3D;”boss-text”   &#x2F;&#x2F;className值，防止重复 这里写的classNames<br>        &gt;<br>            <div>BOSS级人物-孙悟空</div><br>        </CSSTransition><br>        <div><button onClick={this.toToggole}>召唤Boss</button></div><br>    </div><br>    );<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- css样式</span><br><span class="line"></span><br><span class="line">  - xxx-enter: 进入（入场）前的CSS样式；</span><br><span class="line">  - xxx-enter-active:进入动画直到完成时之前的CSS样式;</span><br><span class="line">  - xxx-enter-done:进入完成时的CSS样式;</span><br><span class="line">  - xxx-exit:退出（出场）前的CSS样式;</span><br><span class="line">  - xxx-exit-active:退出动画知道完成时之前的的CSS样式。</span><br><span class="line">  - xxx-exit-done:退出完成时的CSS样式</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>.boss-text-enter{<br>opacity: 0;<br>}<br>.boss-text-enter-active{<br>opacity: 1;<br>transition: opacity 2000ms;<br>}<br>.boss-text-enter-done{<br>opacity: 1;<br>}<br>.boss-text-exit{<br>opacity: 1;<br>}<br>.boss-text-exit-active{<br>opacity: 0;<br>transition: opacity 2000ms;<br>}<br>.boss-text-exit-done{<br>opacity: 0;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 我们给`&lt;CSSTransition&gt;`加上`unmountOnExit`,加上这个的意思是在元素退场时，自动把DOM也删除，这是以前用CSS动画没办法做到的。</span><br><span class="line"></span><br><span class="line"># transitionGroup</span><br><span class="line"></span><br><span class="line">&lt;CSSTransition&gt; 只能控制一个DOM元素的动画， 向控制多个动画  需要使用 transitionGroup 模块</span><br><span class="line"></span><br><span class="line">1. 引入</span><br><span class="line"></span><br><span class="line">   ```jsx</span><br><span class="line">   import &#123;CSSTransition, TransitionGroup&#125; from &#x27;react-transition-group&#x27;;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>用<TransitionGroup> 包裹住 多个 dom 元素</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul ref=&#123;<span class="function">(<span class="params">ul</span>)=&gt;</span>&#123;<span class="variable language_">this</span>.<span class="property">ul</span>=ul&#125;&#125;&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">TransitionGroup</span>&gt;</span> &#123;/*这里包裹住了多个dom内容*/&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;</span></span><br><span class="line"><span class="language-xml">        this.state.list.map((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">            return (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">CSSTransition</span> <span class="attr">这里一定要加入</span>&lt;<span class="attr">CssTranstion</span>&gt;</span> 标签</span></span><br><span class="line"><span class="language-xml">                    timeout=&#123;1000&#125;</span></span><br><span class="line"><span class="language-xml">                    classNames=&#x27;boss-text&#x27;</span></span><br><span class="line"><span class="language-xml">                    unmountOnExit</span></span><br><span class="line"><span class="language-xml">                    appear=&#123;true&#125;</span></span><br><span class="line"><span class="language-xml">                    key=&#123;index+item&#125;  </span></span><br><span class="line"><span class="language-xml">                &gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">XiaojiejieItem</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">content</span>=<span class="string">&#123;item&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">index</span>=<span class="string">&#123;index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">deleteItem</span>=<span class="string">&#123;this.deleteItem.bind(this)&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            )</span></span><br><span class="line"><span class="language-xml">        &#125;)</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">TransitionGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>  </span><br></pre></td></tr></table></figure></li><li><p>这里一定要加入<CssTranstion> 标签 ， 可以为dom 设置classNames 属性和 timeout等</p></li></ol></li></ol><h1 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h1><h1 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h1><p>react-router 是一个基础react的路由库， 它可以让你向应用中快速添加视图和数据流， 同时保持页面与url间的同步。 凡是ract技术栈的项目， 都需要用到react-router；</p><h2 id="用create-react-app-脚手架初始化项目"><a href="#用create-react-app-脚手架初始化项目" class="headerlink" title="用create-react-app 脚手架初始化项目"></a>用create-react-app 脚手架初始化项目</h2><ol><li><p><code>cnpm install -g create-react-app</code> </p></li><li><p>直接使用脚手架工具创建项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:  //进入D盘</span><br><span class="line">mkdir ReactRouterDemo   //创建ReactRouterDemo文件夹</span><br><span class="line">cd ReactRouterDemo      //进入文件夹</span><br><span class="line">create-react-app demo  //用脚手架创建React项目</span><br><span class="line">cd demo   //等项目创建完成后，进入项目目录</span><br><span class="line">npm  start  //预览项</span><br></pre></td></tr></table></figure></li><li><p>安装react-router <code>cnpm install --save react-router-dom</code></p></li><li><p><a href="https://jspang.com/detailed?id=49#toc34">编写一个最简单的路由程序</a></p><p>首先我们改写<code>src</code>文件目录下的<code>index.js</code>代码。改为下面的代码,具体的意思在视频中讲解:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AppRouter</span> <span class="keyword">from</span> <span class="string">&#x27;./AppRouter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">AppRouter</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><p>现在的<code>AppRouter</code>组件是没有的，我们可以在<code>src</code>目录下建立一个<code>AppRouter.js</code>文件，然后写入下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Index</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>JSPang.com<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">List</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>List-Page<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AppRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/list/&quot;</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Index&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/list/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;List&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AppRouter</span>;</span><br></pre></td></tr></table></figure><p>这时候就可以到浏览器中看一下效果了，如果一切正常，就可以实现页面跳转。但这只是最简单的页面跳转，第一节课先学这么多。</p></li></ol><h1 id="使用ReactRouter"><a href="#使用ReactRouter" class="headerlink" title="使用ReactRouter"></a>使用ReactRouter</h1><h2 id="编写index组件"><a href="#编写index组件" class="headerlink" title="编写index组件"></a>编写index组件</h2><p>先在<code>/src</code>目录下建立一个文件夹，我这里起名叫做<code>Pages</code>（你可以起任何名字），然后建立一个组件文件<code>Index.js</code>。这里边我们就完全安装工作中的模式来写，只是没有什么业务逻辑，UI也制作的相当加简单。代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Index</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> (  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>JSPang.com<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Index</span>;</span><br></pre></td></tr></table></figure><h2 id="编写List组件"><a href="#编写List组件" class="headerlink" title="编写List组件"></a>编写List组件</h2><p>编写完<code>Index</code>组件以后，继续编写<code>List</code>组件。其实这个组件和<code>Index</code>基本一样。代码如下: 再pages文件 创建 List.js 文件s</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> (  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>List Page<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">List</span>;</span><br></pre></td></tr></table></figure><h2 id="修改AppRouter-js"><a href="#修改AppRouter-js" class="headerlink" title="修改AppRouter.js"></a>修改AppRouter.js</h2><p>两个组件制作完成后，我们把它引入路由配置文件，然后进行路由的配置就可以了，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Index</span> <span class="keyword">from</span> <span class="string">&#x27;./Pages/Index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;./Pages/List&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AppRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/list/&quot;</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Index&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/list/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;List&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AppRouter</span>;</span><br></pre></td></tr></table></figure><p>现在看起来就和我们实际工作中差不多了，也和我们平时写的普通<code>html</code>页面很类似了。</p><h2 id="exact-精准匹配的意思"><a href="#exact-精准匹配的意思" class="headerlink" title="exact 精准匹配的意思"></a>exact 精准匹配的意思</h2><p>精准匹配就是你的路径信息要完全匹配成功。 才可以实现跳转。 匹配一部分是不行的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/&quot;  component=&#123;Index&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;/list/&quot; component=&#123;List&#125; /&gt;</span><br><span class="line"></span><br><span class="line">//  这种情况会 把 Index 和 List 都匹配到</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/&quot; exact component=&#123;Index&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;/list/&quot; component=&#123;List&#125; /&gt;</span><br><span class="line"></span><br><span class="line">// 这种情况是正常情况</span><br></pre></td></tr></table></figure><h1 id="reactRouter-动态传值"><a href="#reactRouter-动态传值" class="headerlink" title="reactRouter 动态传值"></a>reactRouter 动态传值</h1><p>之前已经搞定了 链接跳转的问题，</p><p>那现在想象这样一个场景，在一个很多文章的列表页面，然后点击任何一个链接，都可以准确的打开详细的文章内容，<code>这就需要靠传递文章ID，然后后台准确检索文章内容最后呈现</code>。这个过程每次传递到<code>详细页面的ID值</code>都是不一样的，所以就需要路由有动态传值的能力</p><h2 id="再Route上设置允许动态传值"><a href="#再Route上设置允许动态传值" class="headerlink" title="再Route上设置允许动态传值"></a>再Route上设置允许动态传值</h2><p><code>&lt;Route path=&quot;/list:/id&quot; component=&#123;List&#125;&gt;</code></p><p>就是path上加上<code>:id</code>。 这样就设置了允许传值规则</p><h2 id="Link-上传递值"><a href="#Link-上传递值" class="headerlink" title="Link 上传递值"></a>Link 上传递值</h2><p>设置好规则后，就可以在<code>Link</code>上设置值了，现在设置传递的ID值了，这时候不用再添加id了，直接写值就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;Link to=&quot;/list/123&quot;&gt;列表&lt;/Link&gt; &lt;/li&gt;</span><br></pre></td></tr></table></figure><p>现在就可以进行传值了。为了方便你的学习，这里给出全部<code>AppRouter.js</code>代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import &#123; BrowserRouter as Router, Route, Link &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import Index from &#x27;./Pages/Index&#x27;</span><br><span class="line">import List from &#x27;./Pages/List&#x27;</span><br><span class="line">function AppRouter() &#123;  </span><br><span class="line">    return (    </span><br><span class="line">        &lt;Router&gt;        </span><br><span class="line">            &lt;ul&gt;            </span><br><span class="line">                &lt;li&gt; &lt;Link to=&quot;/&quot;&gt;首页&lt;/Link&gt; &lt;/li&gt;            </span><br><span class="line">                &lt;li&gt;&lt;Link to=&quot;/list/123&quot;&gt;列表&lt;/Link&gt; &lt;/li&gt;        </span><br><span class="line">            &lt;/ul&gt;        </span><br><span class="line">            &lt;Route path=&quot;/&quot; exact component=&#123;Index&#125; /&gt;        </span><br><span class="line">            &lt;Route path=&quot;/list/:id&quot; component=&#123;List&#125; /&gt;    </span><br><span class="line">        &lt;/Router&gt;  </span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">export default AppRouter;</span><br></pre></td></tr></table></figure><h2 id="在List组件上接受并显示传递值"><a href="#在List组件上接受并显示传递值" class="headerlink" title="在List组件上接受并显示传递值"></a>在List组件上接受并显示传递值</h2><p>组件接收传递过来的值的时候，可以在声明周期<code>componentDidMount</code>中进行，传递的值在<code>this.props.match</code>中。我们可以先打印出来,代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;        </span><br><span class="line">        <span class="variable language_">super</span>(props);        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;  &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;         </span><br><span class="line">        <span class="keyword">return</span> (  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>List Page<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> );    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//-关键代码---------start    </span></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;        </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>)    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//-关键代码---------end</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">List</span>;</span><br></pre></td></tr></table></figure><p>然后在浏览器的控制台中可以看到打印出的对象，对象包括三个部分:</p><ul><li>patch:自己定义的路由规则，可以清楚的看到是可以产地id参数的。</li><li>url: 真实的访问路径，这上面可以清楚的看到传递过来的参数是什么。</li><li>params：传递过来的参数，<code>key</code>和<code>value</code>值。</li></ul><p>明白了match中的对象属性，就可以轻松取得传递过来的ID值了。代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;        </span><br><span class="line">        <span class="variable language_">super</span>(props);        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;  &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;         </span><br><span class="line">        <span class="keyword">return</span> (  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>List Page-&gt;&#123;this.state.id&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> );    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;       </span><br><span class="line">        <span class="comment">// console.log(this.props.match.params.id)       </span></span><br><span class="line">        <span class="keyword">let</span> tempId=<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span>.<span class="property">id</span>        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">id</span>:tempId &#125;)    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">List</span>;</span><br></pre></td></tr></table></figure><p>这样就实现了动态传值，需要注意的是如果你不传任何东西，是没办法匹配路由成功的。下一节我们更加形象的作一个动态列表，然后进行动态传值。这节课算是一个理论基础吧。</p><h2 id="模拟一个列表数组"><a href="#模拟一个列表数组" class="headerlink" title="模拟一个列表数组"></a><a href="https://jspang.com/detailed?id=49#toc315">模拟一个列表数组</a></h2><p>现在可以在<code>Index</code>组件里模拟一个列表数组，就相当于我们从后台动态获取到的内容，然后数组中包括文章的<code>cid</code>和<code>title</code>。直接在state初始化时进行设置，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;    </span><br><span class="line">     <span class="variable language_">super</span>(props);    </span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">state</span> = &#123;         </span><br><span class="line">        <span class="attr">list</span>:[            </span><br><span class="line">            &#123;<span class="attr">cid</span>:<span class="number">123</span>,<span class="attr">title</span>:<span class="string">&#x27;技术胖的个人博客-1&#x27;</span>&#125;,            </span><br><span class="line">            &#123;<span class="attr">cid</span>:<span class="number">456</span>,<span class="attr">title</span>:<span class="string">&#x27;技术胖的个人博客-2&#x27;</span>&#125;,            </span><br><span class="line">            &#123;<span class="attr">cid</span>:<span class="number">789</span>,<span class="attr">title</span>:<span class="string">&#x27;技术胖的个人博客-3&#x27;</span>&#125;,        </span><br><span class="line">        ]    </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了<code>list</code>数组后，再修改一下UI，进行有效的遍历，<code>Render</code>代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title function_">render</span>(<span class="params"></span>) &#123;     </span><br><span class="line">    <span class="keyword">return</span> (         </span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>            </span></span><br><span class="line"><span class="language-xml">        &#123;                </span></span><br><span class="line"><span class="language-xml">            this.state.list.map((item,index)=&gt;&#123;                    </span></span><br><span class="line"><span class="language-xml">                return (                        </span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span> &#123;item.title&#125; </span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span>                    </span></span><br><span class="line"><span class="language-xml">                )                </span></span><br><span class="line"><span class="language-xml">            &#125;)            </span></span><br><span class="line"><span class="language-xml">        &#125;        </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>    </span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><p>列表已经可以在<code>Index</code>组件里显示出来了，接下来可以配置<code>&lt;Link&gt;</code>了,在配置之前，你需要先引入<code>Link</code>组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br></pre></td></tr></table></figure><p>引入后直接使用进行跳转就可以，但是需要注意一点，要用<code>&#123;&#125;</code>的形式，也就是把<code>to</code>里边的内容解析成JS的形式，这样才能顺利的传值过去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;     </span><br><span class="line">    <span class="keyword">return</span> (         </span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>            </span></span><br><span class="line"><span class="language-xml">        &#123;                </span></span><br><span class="line"><span class="language-xml">            this.state.list.map((item,index)=&gt;&#123;                    </span></span><br><span class="line"><span class="language-xml">                return (                        </span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>                            </span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>&#x27;/<span class="attr">list</span>/&#x27;+<span class="attr">item.uid</span>&#125;&gt;</span> &#123;item.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span>                         </span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span>                    </span></span><br><span class="line"><span class="language-xml">                )                </span></span><br><span class="line"><span class="language-xml">            &#125;)            </span></span><br><span class="line"><span class="language-xml">        &#125;        </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>    </span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><p>到目前为止，已经很类似我们项目中的列表向详细页进行传值了。为了方便你学习，给出<code>Index.js</code>的所有代码.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Index</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;        </span><br><span class="line">        <span class="variable language_">super</span>(props);        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;             </span><br><span class="line">            <span class="attr">list</span>:[                </span><br><span class="line">                &#123;<span class="attr">uid</span>:<span class="number">123</span>,<span class="attr">title</span>:<span class="string">&#x27;技术胖的个人博客-1&#x27;</span>&#125;,                </span><br><span class="line">                &#123;<span class="attr">uid</span>:<span class="number">456</span>,<span class="attr">title</span>:<span class="string">&#x27;技术胖的个人博客-2&#x27;</span>&#125;,                </span><br><span class="line">                &#123;<span class="attr">uid</span>:<span class="number">789</span>,<span class="attr">title</span>:<span class="string">&#x27;技术胖的个人博客-3&#x27;</span>&#125;,            </span><br><span class="line">            ]         </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;         </span><br><span class="line">        <span class="keyword">return</span> (             </span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>                </span></span><br><span class="line"><span class="language-xml">            &#123;                    </span></span><br><span class="line"><span class="language-xml">                this.state.list.map((item,index)=&gt;&#123;                        </span></span><br><span class="line"><span class="language-xml">                    return (                            </span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>                               </span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>&#x27;/<span class="attr">list</span>/&#x27;+<span class="attr">item.uid</span>&#125;&gt;</span> &#123;item.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span>                             </span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span>                        </span></span><br><span class="line"><span class="language-xml">                    )                    </span></span><br><span class="line"><span class="language-xml">                &#125;)                </span></span><br><span class="line"><span class="language-xml">            &#125;            </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>        </span><br><span class="line">    )    </span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Index</span>;</span><br></pre></td></tr></table></figure><p>通过四小节的学习，你一定对<code>React Router</code>有了基本的了解，接下来的学习会稍微提升一点难度，所以你先要把这四小节课学好，练好.再向下进行。</p><h1 id="reactRouter-重定向-redirect-使用"><a href="#reactRouter-重定向-redirect-使用" class="headerlink" title="reactRouter 重定向-redirect 使用"></a>reactRouter 重定向-redirect 使用</h1><ul><li>标签式重定向：利用<Redirect> 标签来进行重定向，业务逻辑不复杂时建议使用这种。</li><li>编程式重定向： 利用编程的方式， 一般用于业务逻辑当中，比如登录成功跳转到会员中心</li></ul><p>重定向和跳转有一个重要的区别：</p><p>跳转是可以用浏览器回退按钮 返回上一级的， 而重定向是不可以的</p><h2 id="标签式重定向"><a href="#标签式重定向" class="headerlink" title="标签式重定向"></a>标签式重定向</h2><p>首先建立一个<code>Home.js</code>的页面，这个页面我还是用快速生成的方式来进行编写，代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;        </span><br><span class="line">        <span class="variable language_">super</span>(props);        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;  &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;         </span><br><span class="line">        <span class="keyword">return</span> (  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是 Home 页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> );    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></table></figure><p>这个页面非常简单，就是一个普通的有状态组件。</p><p>有了组件后可以配置一下路由规则，也就是在<code>AppRouter.js</code>里加一个<code>&lt;Route&gt;</code>配置，配置时记得引入<code>Home</code>组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./Pages/Home&#x27;</span>&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/home/&quot;</span> component=&#123;<span class="title class_">Home</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>之后打开<code>Index.js</code>文件，从<code>Index</code>组件重新定向到<code>Home</code>组件，需要先引入<code>Redirect</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> , <span class="title class_">Redirect</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br></pre></td></tr></table></figure><p>引入<code>Redirect</code>后，直接在<code>render</code>函数里使用就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Redirect</span> to=<span class="string">&quot;/home/&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>现在就可以实现页面的重定向。</p><h2 id="编程式重定向"><a href="#编程式重定向" class="headerlink" title="编程式重定向"></a><a href="https://jspang.com/detailed?id=49#toc318">编程式重定向</a></h2><p>编程式重定向就是不再利用<code>&lt;Redirect/&gt;</code>标签，而是直接使用<code>JS</code>的语法实现重定向。他一般用在业务逻辑比较发杂的场合或者需要多次判断的场合。我们这里就不模拟复杂场景了，还是利用上边的例子实现一下，让大家看到结果就好。</p><p>比如直接在构造函数<code>constructor</code>中加入下面的重定向代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.props.history.push(&quot;/home/&quot;);  </span><br></pre></td></tr></table></figure><p>就可以顺利实现跳转，这样看起来和上面的过程是一样的。这两种方式的重定向你可以根据真实需求使用，这样能让你的程序更加的灵活。课后你可以试着模拟用户的登录过程试着用一下这样的跳转。</p><h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><p>后台管理系统， 大部分是用嵌套路由，来实现页面总体划分。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><code>create-react-app demo2</code></p><p><code>npm isntall --save react-router-dom</code></p><h2 id="初始化基本目录"><a href="#初始化基本目录" class="headerlink" title="初始化基本目录"></a>初始化基本目录</h2><p>再src下建立page文件夹。 然后再page下创建video 和 workplace。 然后再src下建立Approuter.js 该文件是路由配置文件</p><h1 id="react-router-1"><a href="#react-router-1" class="headerlink" title="react-router"></a>react-router</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2023/02/28/vue/"/>
      <url>/2023/02/28/vue/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> vue2.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts</title>
      <link href="/2023/02/28/ts/"/>
      <url>/2023/02/28/ts/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/28/hello-world/"/>
      <url>/2023/02/28/hello-world/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js</title>
      <link href="/2022/03/28/js/"/>
      <url>/2022/03/28/js/</url>
      
        <content type="html"><![CDATA[<p>在url地址栏输入 地址访问 经历 ：<br>    1. 浏览器把输入的网址，解析为ip；<br>    1.1 首先查找浏览器缓存，如果有缓存，那么直接返回ip，否则进行下一步<br>    1.2 查看系统缓存， 浏览器进行系统调用（window 的gethostname ），查找host文件， 直接返回ip； 没有下一步<br>    1.3 查找路由器缓存， 借助网络，查找isp服务商缓存的DNS服务器，找到返回ip，没有下一步<br>    （递归查询， 迭代查询）<br>    2. 浏览器与目标建立tcp连接：<br>    2.1 主机浏览器拿到目标服务器的ip地址后， 与服务器建立tcp连接<br>    2.2 tcp3次握手建立连接：<br>            第一次：浏览器所在的主机（本机）向目标服务器发出请求报文（SYN标志为1）<br>            第二次：目标服务器接受报文后，同意建立连接，向客户端发出确认报文（SYN, ACK 标志均为1）<br>            第三次：客户端确认收到报文后，再次向服务器发出报文，确认已收到确认报文（客户端与服务器TCP连接确认完成，开始通信）<br>   3. 浏览器通过http协议发送请求<br>    浏览器发送一个HTTP-GET 方法报文请求。 请求中包含URL， KeepAlive 长连接，还有 User-Agent<br>    用户浏览器操作系统信息，编码等。 其中Accep-Encoding （压缩gzip）和 Cookies（用户首次访问，会提示<br>    服务器建立用户缓存信息， 不是首次访问利用Cookies对应的键值对，找到相应的缓存，缓存中存放着用户名，密码和一些用户设置项）项，<br>    4. 某些服务会做永久重定向响应：<br>    大型网站 一般不会直接返回请求页面，（状态码不是200， 而是301,302 以3开头的重定向码，浏览器获取了重定向响应<br>    后，在响应报文中获取到location项找到重定向地址，重新第一步访问即可）<br>        重定向作用： 主要是2点 : 1.为了负载均衡（减少服务器压力）；  2.重定向可以将多个域名的访问，集中多一个站点<br>            如：baidu.com 和 <a href="http://www.baidu.com/">www.baidu.com</a> 搜索引擎认为是两个网站，永久重定向会将两个地址关联起来<br>            ，搜索引擎任务是同一个网站，提高排名<br>    5. 浏览器跟踪重定向地址： 浏览器拿到重定向地址后，重新发送一个http请求<br>    6. 服务器处理请求： 服务器收到获取请求，处理并返回一个响应报文。<br>    7. 根据报文的Content-type  响应文件呈现形式<br>    8. 释放tcp连接:<br>    8.1 浏览器所在的主机向服务器发出连接释放报文，然后停止发送数据；<br>    8.2 服务器接收到报文后确认报文，然后将服务器上未传送完的数据发送完；<br>    8.3 服务器数据传输完毕后，向客户端发送连接释放报文；<br>    8.4 客户端接受到报文后，发出确认，然后释放tcp连接<br>    9. 浏览器根据对应的渲染机制 渲染html</p><ol><li><p>浏览器渲染原理<br> 首先下载静态资源<br> 解析html时，发现其中有其他外部资源链接 如css、js、图片等， 会立即开启其他线程下载。<br> 当外部资源下载js时， html解析会停下来。 等js下载 执行结束后才继续 解析HTML<br> 解析html&#x3D;》构建DOM树<br> 解析CSS &#x3D;&gt; 构建CSSOM树<br> 利用DOM 和 CSSOM树 构建 Render树<br> 进行布局 layout<br> 进行绘制painting 到屏幕上</p><p> 当某个部分发生改变，影响到布局， 进行重排 reflow<br> 当某个元素背景、边框颜色等发生改变， 进行重回 repaint</p></li><li><p>变量<br> let 在同一个作用域中，不能重复声明同一个变量。 for 循环 判断条件和 代码块中 是两个作用域<br> let 声明的变量不能 变量提升到 顶层。   &#x3D;》 导致存在暂时性 死区。</p><p> const 同let 一样。 const 声明的变量 内存地址不能改变</p></li><li><p>结构赋值<br> let {foo: {bar}} &#x3D; {baz: ‘baz’}; &#x2F;&#x2F; 会报错<br> 原因很简单，因为foo这时等于undefined，再取子属性就会报错，请看下面的代码。 </p><ol><li>数组的 结构赋值</li><li>对象的结构赋值</li><li>let arr &#x3D; [1, 2, 3] ；<br> let {0：a, [arr.length-1]: b, 1:c} &#x3D; arr &#x2F;&#x2F; 此时将数组转化为 伪数组对象</li><li>字符串的结构赋值 &#x3D;》 转化为 伪数组对象 const [a,b] &#x3D; ‘hi’  let {length: len} &#x3D; ‘hello’</li><li>数值和布尔值的结构赋值 数值和布尔值 都有 封装的toString 属性， 因此<br> let {toString：s} &#x3D; 123；<br> let {toString：s} &#x3D; true；</li><li>let {proxy： x} &#x3D; undefined  报错 let {prop： x} &#x3D; null<br> null 和 undefined 没有包装对象。 对他们进行结构都会报错</li><li>函数参数的解构赋值</li></ol></li><li><p>字符串：</p><ol><li>“hellow”.charAt(0)， 返回0处的 值  &#x3D;》 h</li><li>‘hellow’.charCodeAt(0), 返回0处值 的 unicode 编码 是一个数字<br> String.fromCharCode(数字) &#x3D;》 将 unicode 编码数字 转化为对应的 字符串</li><li>字符串是已UTF-16 格式储存， 每个字符固定是 2个字节。 对于 4个字节储存的 字符， js认为是2个字符<br>ES3 提供了 codePointAt方法，能够正确处理4个字节储存的字符。 返回一个字符的 码点 数字<br>   “级”.codePointAt(0) &#x2F;&#x2F; 32423<br>  Strgin.fromCodePoint(32423) &#x3D;&gt; ‘级’</li></ol></li><li><p>函数<br> length 属性 含义： 该函数预期传入的参数个数， 某个参数指定默认值后， 预期参数个数就不包括这个参数<br>     rest 参数也不计入length属性； 因为rest 意义就是 不知道会传入几个参数，统一代替的<br> (function (a &#x3D; 0, b, c) {}).length &#x2F;&#x2F; 0<br> (function (a, b &#x3D; 1, c) {}).length &#x2F;&#x2F; 1  如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了。</p><p> 默认参数，函数声明初始化时，参数会形成一个单独的作用域。  有且只有设置默认值时，才会出现 这个作用域</p></li></ol><p>arguments.callee 指向  是arguments 的一个属性指向正在运行的 函数<br>（function（） {}）.caller 是函数的一个 一个属性 指向正在运行的 函数 在window 下 调用 直接是null<br>6.箭头函数<br>    如果箭头函数直接返回一个对象， 就必须在对象外面加上括号，否则会报错： let getTime &#x3D; time &#x3D;&gt; ({time: Date.now()});</p><p> Vue 通过建立一个虚拟DOM 来追踪自己如果要改变真实DOM<br>return createElement（’h1’, this.title）； &#x3D;》》 createElement 函数返回的就是一个{Vnode} 虚拟 节点 </p><p>Vue的生命周期</p><ol><li><p>beforeCreate 实例创建之前除非，不能访问data computed watch 的数据<br>2.created 实例创建后发生， 可以访问data中的数据， 当前不能与dom 进行交互</p></li><li><p>beforeMount 发生在挂载之前， 此时虚拟dom已经创建完成<br>4.mounted 在挂载完成后发生， 真实的dom挂载完成，数据完成双向绑定；可以访问dom节点，</p></li><li><p>beforeUpdate 发生在更新之前，响应式数据更新，但是虚拟dom还没有渲染，<br>6.updated 发生在更新完成之后，当前阶段组件dom已经更新完成<br>7.beforeDestory 发生在实例销毁之前，在当前阶段实例可以被使用， 我们可以清除计时器等<br>8.destoryed 发生在实例销毁之后， 这个时候组件被拆解，数据被卸载，监听被移除</p></li><li><p>实例创建之前，不能访问data 、 实例创建之后；可以访问到data数据； 不能与 dom 进行交互<br> 挂载之前， 此时虚拟dom已经创建完成；  挂载之后完成； 真实的dom完成挂咋； 数据完成双向绑定；可以访问dom节点<br>发生再更新之前， 响应式数据； 但是虚拟dom 没有渲染之前被触发；  发生再更新完成之后， 当前阶段组件dom已经更新完成<br>发生再实例销毁之前， 此时实例可以被调用  发生再实例销毁之后， 这个时候组件被拆解 数据被卸载， 监听被移除</p></li></ol><p>Vue.extend() 创建vue 的一个子类<br>nextTick 异步队列，主要是监听DOM 更新完成；<br>主要当前浏览器环节使用 promise mutationObserver setImmediate 或者 setTimout方法</p><p>Vue2.x 监听数组的变化： vue 会将数组的原型方法进行重写； 每次调用时，会监听到数组的更改，然后通知视图进行更新；<br> 如果是有引用类型，那么就对数组进行递归进行监听，</p><p>1.浮动 影响自身 和同级后面元素的位置<br>2.浮动会造成父级高度的塌陷；影响正常文档流布局； 所以需要清除浮动<br>    1.清除浮动的方法: 给父级 添加overflow hidden属性； 给浮动元素同级后面 添加一个div元素，设置clear:both<br>    ; 给父级设置伪类：after {display: block; content: ‘’; visibility:hidden;clear:both; height:0} 三种方法<br>3. </p><p>key值： vue为了尽可能降低dom操作，尽可能的复用已有的dom 而非重新渲染；key的作用是给节点一个唯一标识，<br>以便能够再操作dom时找到可以复用的节点；</p><p>keep-alive 的用法 缓存动态组件； vue2.0版本后， 内置组件已经封装了两个属性， include 表示缓存的组件； exclude表示不需要缓存<br>    可以是名字或者 </p><p>2.4 $attrs 和 $listeners 属性<br>inheritAttrs 默认是 true 继承所有父组件属性,除了props 的特定绑定;作为普通的html属性应用在 子组件的根元素;<br>如果inheritAttrs是false，但是class 属性会继承；</p><p>$listeners–属性，它是一个对象，里面包含了作用在这个组件上的所有监听器，你就可以配合 v-on&#x3D;”$listeners”<br>将所有的事件监听器指向这个组件的某个特定的子元素。</p><p>inheritAttrs 继承所有的属性 除了props； </p><p>模块化的前世今生<br>模块化就是将一个复杂的系统分解成多个独立的模块； 之前都是通过一系列的script 标签来维护 模块之前的关系；<br>但是一旦项目复杂。 这个方式 就会使我们的代码混乱不堪；<br>由于早期官方 并没有提供统一的解决方案，所以早期 关于模块化方案层出不穷。<br>IIFE ： 模块化的一大作用就是用来隔离作用域，避免变量冲突； 最早为了避免与全局变量污染， 智能使用闭包来实现模块化。<br>（function (window) {<br>    window.query &#x3D; {} ;<br>}）(window)<br>&#x2F;&#x2F; 虽然IIFE 有效解决了命名冲突的问题， 但是对于依赖管理， 还是束手无策。 因为浏览器时自上而下的执行脚本；为了维持脚本<br>间的依赖关系；就必须手动维护好script 标签 相对顺序<br>AMD： 一种模块化规范， 主要提供了异步加载功能；  需要使用RequireJS去实现模块化；  所有的依赖像必须提前声明好；<br>在导入模块的时候，也会先加载对应的依赖模块， 然后再执行后续代码，AMD可以并发加载所有的依赖模块；<br>define（’.&#x2F;index.js’, function(code) {<br>    &#x2F;&#x2F; code 时index.js 返回的内容<br>return {<br>    }<br>}）<br>CMD：通由阿里玉伯提出；通AMD类型， CMD需要SeaJS 库来实现模块化；同AMD 一样； CMD也是为了解决 依赖管理问题；<br>define（function （require） {<br>    var path &#x3D; require.resolve(‘.&#x2F;cmdDefine’);<br>    alert(path)<br>）<br>  CMD 加载完某个依赖模块后并不执行，只是下载而已， 再所有依赖模块加载完成后进入主逻辑， 如果 require语句才执行<br>对应的模块， 用require.asynce（） 可以实现赖加载<br>CommonJS， 随着模块化深入； 需要一种标准的模块化方案； 此时commonJS 应运而生； node.js应用就是采用这个规范；<br>内置module对象 定义模块； require 函数来加载模块文件<br>var add &#x3D; funciton（a, b） {}<br>module.exports &#x3D; {<br>    add: add<br>}</p><p>&#x2F;&#x2F; 加载模块<br>var utils &#x3D; require（’.&#x2F;utils’）<br>console.log(utils.add(1,2)) &#x2F;&#x2F; 3<br>这种模块化方案特点就是：同步阻塞式加载，无法实现按需异步加载。如果时浏览器环境使用CommonJS 模块 需要Browserify<br>进行解析；</p><p>UMD： 上面CommonJs 合AMD 等模块化方案都是针对特定的平台； 如果想要实现 跨平台的模块化， 可以兼容 AMD 合 commonJs<br>等模块化语法</p><p>ES6 modules<br>export<br>import</p><p>CommonJS 合 ES6 模块的两大差异</p><ol><li>CommonJS 输出的是一个值的拷贝； Es6模块输出的是一个值的引用</li><li>CommonJS 模块是运行时加载， es6模块时编译时输出接口</li></ol><p>第二个差异是因为 CommonJS 加载的是一个对象（module.exports 属性），<br>该对象只有在脚本运行完才会生成。 </p><p>而es6模块不是对象； 它的对外接口只是一种静态定义’</p><p>第一个差异CommonJS 输出的是一个值的拷贝</p><p>&#x2F;&#x2F; lib.js<br>var counter &#x3D; 3;<br>function incCounter() {<br>   counter++<br>}<br>module.exports &#x3D; {<br>    counter: counter,<br>    incCounter: incCounter<br>}</p><p>&#x2F;&#x2F; main,js 里面加载这个模块<br>var mod &#x3D; require(‘.&#x2F;lib’);<br>console.log(mod.counter); &#x2F;&#x2F; 3<br>mod.incCounter();<br>console.log(mod.counter); &#x2F;&#x2F; 3 这里说明 lib.js 模块加载以后， 它的内部变化影响不到输出的 mod.counter 了；<br>除非写成一个函数，才能得到内部变动后的值。</p><p>&#x2F;&#x2F; lib.js<br>var counter &#x3D; 3；<br>function incCounter（） {<br>    counter++<br>}<br>module.exports &#x3D; { &#x2F;&#x2F; 此时输出的其实是一个 取值器函数<br>    get counter() {<br>        return counter<br>    },<br>    incCounter: incCounter<br>}</p><div></div><p>es6 模块的运行机制与CommonJS 不一样。 JS引擎对脚本静态分析的时候，遇到模块加载命令 import，<br>就会生成一个只读的引用。 等到脚本真正执行时，再根据这个只读的引用， 到被加载的哪个模块里面去取值；<br>（es6模块时动态引用，并且不会缓存值， 模块里面的变量绑定其所在的模块）</p><p>&#x2F;&#x2F; lib.js<br>export let counter &#x3D; 3；<br>export function incCounter() {<br>    coun3ter++;<br>}</p><p>&#x2F;&#x2F; mian.js<br>import {counter, incCounter} from ‘.&#x2F;lib’;<br>console.log(counter); &#x2F;&#x2F; 3<br>incCounter();<br>console.log(counter); &#x2F;&#x2F; 4<br>{}</p>]]></content>
      
      
      <categories>
          
          <category> 前端js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node</title>
      <link href="/2022/03/20/node/"/>
      <url>/2022/03/20/node/</url>
      
        <content type="html"><![CDATA[<h1 id="三种主流的-node-程序"><a href="#三种主流的-node-程序" class="headerlink" title="三种主流的 node  程序"></a>三种主流的 node  程序</h1><ol><li><p>web应用程序： 提供单页面应用的简单程序， REST微服务以及全栈的web应用</p></li><li><p>命令行工具： npm、 Gulp、 webpack</p></li><li><p>后台程序： 后台服务、比如PM2  </p><p>以及桌面程序：Electorn 框架写的软件</p></li></ol><h2 id="module-exports-和-exports"><a href="#module-exports-和-exports" class="headerlink" title="module.exports 和 exports"></a>module.exports 和 exports</h2><p>CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。</p><ol><li><p>module.exports 级别高于 exports</p></li><li><p>如果exports和module.exports 指向不同的内存地址时，应该以module.exports 的结果为准； </p><p>因为正常情况（下图）exports是modules.exports 都是本来都是指向相同内存地址； 这个内存地址指向同一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;lili&#x27;</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">name</span> = name</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Mloong\AppData\Roaming\Typora\typora-user-images\image-20210527220512887.png" alt="image-20210527220512887"></p><p>如果你改变了 exports 的引用将他设置为另一个对象 或者将 module.exports 设置为另一个对象， 应该以module.exports的对象为准</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;lili&#x27;</span></span><br><span class="line"><span class="built_in">exports</span> = &#123;</span><br><span class="line">  name : name <span class="comment">// 这准写法以module.exports 为准 </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">cname</span>: name <span class="comment">// 这里导出的是对象，里面只有cname</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Mloong\AppData\Roaming\Typora\typora-user-images\image-20210527221209462.png" alt="image-20210527221209462"></p></li></ol><h2 id="模块查找原则"><a href="#模块查找原则" class="headerlink" title="模块查找原则"></a>模块查找原则</h2><p>模块既可以是一个文件，也可以是包含一个或多个文件的目录， </p><p>如果模块是一个目录， node通常会在这个目录下找一个index.js 的文件作为文件的入口（<em><strong>这个默认值也可重写， 在package.json 中修改main 自动</strong></em>）</p><p>node 以同步的方法去找模块， 定位到模块并加载文件中的内容， node 查找文件的顺序是  </p><ol><li><p>require(‘.&#x2F;find.js’) 和 require(‘.&#x2F;find’)区别 ***这里是都有.&#x2F; **</p><p>require(‘.&#x2F;find.js’); 去当前路径找 find.js 文件</p><p>require(‘.&#x2F;find’) ：</p><ul><li>先去找这个路径的 find.js 文件</li><li>如果没有找到find.js文件， 那么就找find 的文件夹</li><li>如果找到了find的文件夹 ， 再找index.js；如果找到就执行，如果没有找到， 就去 find 文件夹下找package.json 文件中找main 选择的入口文件</li><li>如果找到知道的入口文件不存在或者没有入口文件就会报错， 模块没有找到</li></ul></li><li><p>requires(‘find’) 区别  *** 注意这里是没有路径，也没有后缀名，只写了模块名字  ， 此时node.js 会当做这个 是系统模块**  </p><ol><li><p>（先找系统模块： require(‘fs’)  require(‘http’)， 如果没有</p></li><li><p>然后是当前目录， node_modules 文件夹中查找</p></li><li><p>首先查看是否有改名字的JS 文件</p></li><li><p>再看是否有改名字的文件夹， 改文件夹下里面是否有index.js， 如果没有继续</p></li><li><p>查找 package.json 文件 的 main 选项， 查看入口文件， 如果没有</p></li><li><p>查找父级文件（重复2-5）</p></li><li><p>看模块在当前目录下的node_modules 中吗  在返回 ；不在继续</p></li><li><p>尝试进入父目录 重复 4-6； 如果父目录不存在</p></li><li><p>模块在环境变量NODE_PATH 指定的目录下吗 在返回 ； 不在抛出异常</p></li></ol></li></ol><h2 id="require方法是同步方法-所以一般写在文件顶部"><a href="#require方法是同步方法-所以一般写在文件顶部" class="headerlink" title="require方法是同步方法 所以一般写在文件顶部"></a><em><strong>require方法是同步方法 所以一般写在文件顶部</strong></em></h2><h2 id="node会把模块作为对象缓存起来。-如果两个文件引入了相同的模块，第一个require会把模块返回的数据存在内存中，-这样第二个require就不在去访问和计算源文件了。"><a href="#node会把模块作为对象缓存起来。-如果两个文件引入了相同的模块，第一个require会把模块返回的数据存在内存中，-这样第二个require就不在去访问和计算源文件了。" class="headerlink" title="node会把模块作为对象缓存起来。 如果两个文件引入了相同的模块，第一个require会把模块返回的数据存在内存中， 这样第二个require就不在去访问和计算源文件了。"></a>node会把模块作为对象缓存起来。 如果两个文件引入了相同的模块，第一个require会把模块返回的数据存在内存中， 这样第二个require就不在去访问和计算源文件了。</h2><h2 id="异步编程技术"><a href="#异步编程技术" class="headerlink" title="异步编程技术"></a>异步编程技术</h2><p>  前端中异步， 鼠标点击的后回调 就是异步</p><p>  服务端异步， 事件发生时的响应， node 世界中流行两种响应： 回调和事件监听。</p><ol><li>回调 通常用来定义一次性事件响应的逻辑。 比如数据库查询的回调</li><li>事件监听器 其本质也是一个回调， 不同的是 它跟一个实体事件相关联，比如 鼠标点击就是一个事件， 需要事件监听器 去监听点击事件，</li></ol><p><em><strong>事件发射器</strong></em>： 一个可以继承、能够添加事件发射及处理能力的类（EventEmitter；)</p><ol><li><p>用事件发射器处理重复性事件： HTTP 服务器， TCP服务器 和流，都做成了事件发射器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const net = require(&#x27;net&#x27;);</span><br><span class="line">const server = net.createServer(socket =&gt; &#123;</span><br><span class="line">   socket.on(&#x27;data&#x27;, data =&gt; &#123; // 这里使用了*** on ***进行重复性事件回调</span><br><span class="line">   socket.write(data)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;).listen(8888) </span><br></pre></td></tr></table></figure></li><li><p>响应一次性事件</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const net = require(&#x27;net&#x27;);</span><br><span class="line">   const server = net.createServer(socket =&gt; &#123;</span><br><span class="line">      socket.once(&#x27;data&#x27;, data =&gt; &#123; // 这里使用了***once*** 进行重复性事件回调</span><br><span class="line">      socket.write(data)</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;).listen(8888) </span><br></pre></td></tr></table></figure><h2 id="事件发射器-一个可以继承、能够添加事件发射及处理能力的类（EventEmitter；"><a href="#事件发射器-一个可以继承、能够添加事件发射及处理能力的类（EventEmitter；" class="headerlink" title="事件发射器  一个可以继承、能够添加事件发射及处理能力的类（EventEmitter；)"></a>事件发射器  一个可以继承、能够添加事件发射及处理能力的类（EventEmitter；)</h2><ol><li><p>语法 </p><ul><li>*** 首先引入events模块**</li><li>*** 通过new 调用 events模块中的EventEmitter静态方法去创建发射器实例对象**</li></ul><ol><li>实操</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   //event.js 文件</span><br><span class="line">var EventEmitter = require(&#x27;events&#x27;).EventEmitter; </span><br><span class="line">var event = new EventEmitter(); // 创建事件发射器的实例对象</span><br><span class="line">event.on(&#x27;some_event&#x27;, function() &#123; // 通过 on 去订阅一个事件的逻辑</span><br><span class="line">   console.log(&#x27;some_event 事件触发&#x27;); </span><br><span class="line">&#125;); </span><br><span class="line">setTimeout(function() &#123;  // 通过emit 去触发这个事件</span><br><span class="line">   event.emit(&#x27;some_event&#x27;); </span><br><span class="line">&#125;, 1000); </span><br></pre></td></tr></table></figure></li></ol><h1 id="fs-文件的系统模块"><a href="#fs-文件的系统模块" class="headerlink" title="fs 文件的系统模块"></a>fs 文件的系统模块</h1><ol><li><p>文件的读取 readFile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.readFile(文件路径，[文件读取的编码]， callback)</span><br></pre></td></tr></table></figure></li><li><p>文件的写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.writeFile(文件的路径， &#x27;数据&#x27;， callback)</span><br></pre></td></tr></table></figure></li></ol><h1 id="path-模块"><a href="#path-模块" class="headerlink" title="path 模块"></a>path 模块</h1><ol><li><p>路径拼接api ： 在不同的操作系统中 系统路径的分隔符是不一样的</p><p>windows 上是 &#x2F;  或者 \</p><p>linux 只有 &#x2F; （linux系统通常被用作网站的服务器）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> finialPath = path.<span class="title function_">join</span>(<span class="string">&#x27;路径1&#x27;</span>, <span class="string">&#x27;路径2&#x27;</span>, <span class="string">&#x27;路径3&#x27;</span>)</span><br><span class="line"><span class="comment">// finialPath: &#x27;路径1\路径2\路径3&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>相对路径绝对路径</p><p>相对路径  ‘.&#x2F;a.js’;</p><p>绝对路径 __dirname 来获取 当前文件的绝对路径 （绝对路径使用较多）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);let finialPath = path(__dirname, &#x27;a.js&#x27;);// finialPath： &#x27;当前文件的绝对路径/a.js&#x27;</span><br></pre></td></tr></table></figure></li></ol><h1 id="http-模块-去HTTP协议查看"><a href="#http-模块-去HTTP协议查看" class="headerlink" title="http 模块 去HTTP协议查看"></a>http 模块 去HTTP协议查看</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);http.createServer((req, res) =&gt; &#123;// reqres.end(&#x27;hello world&#x27;)&#125;)</span><br></pre></td></tr></table></figure><h1 id="url-模块-处理url地址-去报文get请求参数查看"><a href="#url-模块-处理url地址-去报文get请求参数查看" class="headerlink" title="url 模块 处理url地址 去报文get请求参数查看"></a>url 模块 处理url地址 去报文get请求参数查看</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const url = require(&#x27;url&#x27;);url.parse() // 解析请求地址</span><br></pre></td></tr></table></figure><h1 id="nodemon-模块"><a href="#nodemon-模块" class="headerlink" title="nodemon 模块"></a>nodemon 模块</h1><p>nodemon 是一个名利行工具，用以辅助项目开发。</p><p>在nodejs中，每次修改文件都要在命令行中重新执行该文件，非常繁琐。</p><p>nodemon用以在修改文件后直接可以看到修改后的效果，不需要</p><p>使用步骤 </p><ol><li>全局瞎子 npm install nodemon -g  （在管理员权限运行）</li><li>在命令行中 用nodemon命令代替node 执行</li></ol><h1 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h1><p>npm 默认下载地址再国外， 国内下载速度慢</p><p>nrm 是可以切换下载地址的第三方工具</p><ol><li>npm install nrm -g </li><li>nrm ls （查看下载地址）</li><li>nrm use taobao 即可</li></ol><h1 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h1><h2 id="gulp-基于node-平台开发的前端构建工具"><a href="#gulp-基于node-平台开发的前端构建工具" class="headerlink" title="gulp 基于node 平台开发的前端构建工具"></a>gulp 基于node 平台开发的前端构建工具</h2><p>将机械化操作编写成任务， 我们想要执行机械化操作去 执行命令行 命令任务就可以自动执行， 不需要程序员手动操作</p><p>gulp 能做什么</p><p>​项目上线 html  js css 文件压缩</p><p>​语法转化 es6 、 less</p><p>​    公共文件抽离</p><p>​    修改文件是 浏览器启动自动刷新</p><h3 id="gulp-使用"><a href="#gulp-使用" class="headerlink" title="gulp 使用"></a>gulp 使用</h3><ol><li><p>使用 npm install gulp  下载库文件</p></li><li><p>在项目根目录下建立 gulpfile.js 文件</p></li><li><p>重构项目的文件夹结构 src目录下放置源代码文件 dist 目录下放置构建后的文件</p></li><li><p>gulpfile.js 编写任务</p><p>*<strong>Gulp中的方法</strong></p><ul><li><p>gulp.src(‘文件路径’) 获取任务要处理的文件</p></li><li><p>gulp.dest(‘输出文件路径’) 输出文件</p></li><li><p>gulp.task(‘任务名称’， 回调函数) 建立gulp任务</p></li><li><p>gulp.watch() 监控文件的变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 引入gulpconst gulp = require(&#x27;gulp&#x27;);const path = require(&#x27;path&#x27;);// 使用gulp.task()建立任务, 任务名称是fitstgulp.task(&#x27;first&#x27;, () =&gt; &#123;// 要处理的文件gulp.src(path.join(__dirname, &#x27;/src/css/base.css&#x27;))// 将处理后的文件输出到dist目录.pipe(gulp.dest(&#x27;./dist/css&#x27;))&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>命令行工具中执行任务</p><p>*** 怎样去执行gulp的任务？  用node 命令是执行整个文件，我们要下载gulp-cli 去执行gulp的 first 任务**</p></li><li><p>下载命令行工具 npm i gulp-cli -g</p></li><li><p>gulp 空格 然后是任务名称  如 gulp first</p></li></ol><h2 id="gulp插件去实现文件的合并压缩功能"><a href="#gulp插件去实现文件的合并压缩功能" class="headerlink" title="gulp插件去实现文件的合并压缩功能"></a>gulp插件去实现文件的合并压缩功能</h2><p>由于gulp只有基础的5个方法，如果要实现一些辅助的操作，需要用到gulp插件</p><ul><li>gulp-htmlmin: html  文件压缩</li><li>gulp-csso: 压缩css</li><li>gulp-babel: js语法转化</li><li>gulp-less: less 语法转化</li><li>gulp-uglify： 压缩混淆js代码</li><li>gulp-file-include: 公共文件内容抽取</li><li>browsersync 浏览实时同步</li></ul><p>*<strong>使用方法</strong></p><ol><li><p>下载插件 如 npm install gulp-htmlmin</p></li><li><p>引用</p></li><li><p>调用</p><h3 id="压缩html文件-gulp-htmlmin"><a href="#压缩html文件-gulp-htmlmin" class="headerlink" title="压缩html文件   gulp-htmlmin"></a>压缩html文件   gulp-htmlmin</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 引入gulpconst gulp = require(&#x27;gulp&#x27;);const path = require(&#x27;path&#x27;);const htmlmin = require(&#x27;gulp-htmlmin&#x27;);// 使用gulp.task()建立任务, 任务名称是htmlmingulp.task(&#x27;htmlmin&#x27;, async () =&gt; &#123;gulp.src(&#x27;./src/*.html&#x27;) // 获取src下面的所有htm使用通配符*    // 压缩html文件中的代码    .pipe(htmlmin(&#123;collapseWhitespace: true&#125;))    .pipe(gulp.dest(&#x27;dist&#x27;))&#125;)</span><br></pre></td></tr></table></figure><h3 id="抽取公共文件包含-gulp-file-include"><a href="#抽取公共文件包含-gulp-file-include" class="headerlink" title="抽取公共文件包含 gulp-file-include"></a>抽取公共文件包含 gulp-file-include</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const fileinclude  = require(&#x27;gulp-file-include&#x27;);gulp.task(&#x27;htmlmin&#x27;, async () =&gt; &#123;gulp.src(&#x27;./src/*.html&#x27;) // 获取src下面的所有htm使用通配符*    // 抽取公共代码    .pipe(fileinclude())    // 压缩html文件中的代码    .pipe(htmlmin(&#123;collapseWhitespace: true&#125;))    .pipe(gulp.dest(&#x27;dist&#x27;))&#125;)</span><br></pre></td></tr></table></figure><p>在common 文件中建立common文件夹， 然后抽取了公共代码</p><p><img src="C:\Users\Mloong\AppData\Roaming\Typora\typora-user-images\image-20210528012917550.png" alt="image-20210528012917550"></p><p>最后在文件中通过@@include(‘公共代码文件路径’) 把公共文件引回来；</p><p><img src="C:\Users\Mloong\AppData\Roaming\Typora\typora-user-images\image-20210528013137440.png" alt="image-20210528013137440"></p><p><img src="C:\Users\Mloong\AppData\Roaming\Typora\typora-user-images\image-20210528013152023.png" alt="image-20210528013152023"></p><p>最后执行 htmlmin  任务 命令行中输入 gulp htmlmin</p><h3 id="css代码less转cass语法转化-css代码压缩"><a href="#css代码less转cass语法转化-css代码压缩" class="headerlink" title="css代码less转cass语法转化 css代码压缩"></a>css代码less转cass语法转化 css代码压缩</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//  还是要先进行下载 npm install gulp-less // npm install gulp-cssoconst less = require(&#x27;gulp-less&#x27;);const csso = require(&#x27;gulp-csso&#x27;)// css 任务： // 1. less 语法转化// 2. css代码压缩gulp.task(&#x27;cssmin&#x27;, async () =&gt; &#123;    // 获取src/css下面的所有.less 和 所有的css文件 注意这里是数组的方式包含了2种文件    gulp.src([&#x27;./src/css/*.less&#x27;, &#x27;./src/css/*.css&#x27;])    .pipe(less()) // 先转化成css文件    .pipe(csso()) // 然后用gulp-csso 插件进行压缩css代码    .pipe(gulp.dest(&#x27;dist/css&#x27;))&#125;)</span><br></pre></td></tr></table></figure><h2 id="es6-代码转化-js-代码压缩"><a href="#es6-代码转化-js-代码压缩" class="headerlink" title="es6 代码转化  js 代码压缩"></a>es6 代码转化  js 代码压缩</h2><ol><li><p>est代码转化首先要先用到 gulp-babel</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Babel 7$ npm install --save-dev gulp-babel @babel/core @babel/preset-env# Babel 6$ npm install --save-dev gulp-babel@7 babel-core babel-preset-env</span><br></pre></td></tr></table></figure></li><li><p>js 代码压缩用到 gulp-uglify   npm install gulp-uglify</p></li><li><p>实现代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const babel = require(&#x27;gulp-babel&#x27;);const uglify = require(&#x27;gulp-uglify&#x27;);gulp.task(&#x27;jsmin&#x27;, async () =&gt; &#123;    gulp.src(&#x27;./src/js/*.js&#x27;)    .pipe(babel(&#123;        // 它可以判断当前代码的运行环境，将代码转化为当前运行环境所支持的代码        presets: [&#x27;@babel/preset-env&#x27;]    &#125;))    .pipe(uglify()) // 压缩js代码    .pipe(gulp.dest(&#x27;dist/js&#x27;))&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="将项目资源的文件夹复制到-打包后的文件夹中"><a href="#将项目资源的文件夹复制到-打包后的文件夹中" class="headerlink" title="将项目资源的文件夹复制到 打包后的文件夹中"></a>将项目资源的文件夹复制到 打包后的文件夹中</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 复制静态资源 如image 文件夹gulp.task(&#x27;copy&#x27;, () =&gt; &#123;    // 复制image文件夹下的东西    gulp.src(&#x27;./src/images/*&#x27;)    .pipe(gulp.dest(&#x27;dist/images&#x27;))    // 复制lib文件夹下的东西    gulp.src(&#x27;./src/lib/*&#x27;)    .pipe(gulp.dest(&#x27;dist/lib&#x27;))&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="我们创建一个任务-去执行上面所有的任务-第二个参数是个数组"><a href="#我们创建一个任务-去执行上面所有的任务-第二个参数是个数组" class="headerlink" title="我们创建一个任务 去执行上面所有的任务  *** 第二个参数是个数组**"></a>我们创建一个任务 去执行上面所有的任务  *** 第二个参数是个数组**</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 建立构建任务 第二个参数是一个数组表示 要执行任务的集合gulp.task(&#x27;deafult&#x27;, [&#x27;htmlmin&#x27;, &#x27;cssmin&#x27;, &#x27;jsmin&#x27;, &#x27;copy&#x27;])</span><br></pre></td></tr></table></figure><p>*** 踩坑: 直接执行报错** </p><hr><p><img src="C:\Users\Mloong\AppData\Roaming\Typora\typora-user-images\image-20210529232332631.png" alt="image-20210529232332631"></p><p> 这个gulp -v 查看版本</p><p><img src="C:\Users\Mloong\AppData\Roaming\Typora\typora-user-images\image-20210529232144682.png" alt="image-20210529232144682"></p><p>如果是4.0 版本的 </p><p>第二个参数：即要执行的所有任务名称必须写成 gulp.series() 的参数</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 建立构建任务 第二个参数是一个数组表示 要执行任务的集合gulp.task(&#x27;default&#x27;, gulp.series(&#x27;htmlmin&#x27;, &#x27;cssmin&#x27;, &#x27;jsmin&#x27;, &#x27;copy&#x27;))</span><br></pre></td></tr></table></figure><h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><p>项目描述文件，记录的当前项目信息， 例如项目名称。 版本。作者， github地址。 当前依赖了哪些第三方模块等。 可使用 npm init -y命令生产</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;  &quot;name&quot;: &quot;description&quot;, // 名称  &quot;version&quot;: &quot;1.0.0&quot;, // 版本  &quot;description&quot;: &quot;&quot;, // 版本  &quot;main&quot;: &quot;index.js&quot;, // 入口文件  &quot;scripts&quot;: &#123; // 命令的别名，用别名代替较长的命令    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;  &#125;,  &quot;keywords&quot;: [], // 关键词  &quot;author&quot;: &quot;&quot;, // 作者  &quot;license&quot;: &quot;ISC&quot;,  // isc 开业协议  &quot;dependencies&quot;: &#123; // 项目依赖，（本地或者线上都需要的依赖）    &quot;formidable&quot;: &quot;^1.2.2&quot;,    &quot;mime&quot;: &quot;^2.5.2&quot;  &#125;，  &quot;devDependencies&quot;: &#123; // 开发依赖（本地依赖） npm i --save-dev 进行下载  &quot;gulp&quot;: &quot;^4.0.2&quot;  &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>npm install –production 安装生产依赖（dependencies）</strong></p><p><strong>下面的依赖</strong> </p><h2 id="scripts-命令的别名"><a href="#scripts-命令的别名" class="headerlink" title="scripts 命令的别名"></a>scripts 命令的别名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123; // 命令    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,    &quot;buld&quot;: &quot;nodemon app.js&quot; // npm run build 相当于=&gt; nodemon app.js   &#125;,</span><br></pre></td></tr></table></figure><h1 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h1><p>记录了模块与模块之前的依赖关系， 以及模块的版本， 以及包的下载地址；</p><h1 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h1><p>超文本传输协议， 规定了 如何从网站传输超文本 到浏览页， 是客户端（用户）和服务器端（网站）请求和应对的标准</p><h2 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h2><p>在HTTP 和响应过程中传递数据块 叫作报文， 包括要传送的数据和一些附加信息， 并且要遵守规定的格式。</p><p> 报文分为请求报文和响应报文 </p><p>请求报文：</p><table><thead><tr><th>请求方式（method）</th><th>post， get</th></tr></thead><tbody><tr><td>请求地址（url）</td><td><a href="http://www.baidu.con/">www.baidu.con</a></td></tr><tr><td>请求报文（headers）</td><td></td></tr></tbody></table><p><img src="C:\Users\Mloong\AppData\Roaming\Typora\typora-user-images\image-20210530161502955.png" alt="image-20210530161502955"></p><p>响应报文：</p><table><thead><tr><th>内容类型</th><th align="left">text&#x2F;html</th></tr></thead><tbody><tr><td>内容长度</td><td align="left">20</td></tr><tr><td>HTTP状态码</td><td align="left">200 请求成功  404 请求资源没有找到 500 服务端错误  400 客户端有语法错误</td></tr><tr><td>res.writeHead(状态码， 响应报文)</td><td align="left">设置响应报文</td></tr><tr><td>内容类型（content-type）</td><td align="left">text&#x2F;plain、text&#x2F;html、 text&#x2F;css、application&#x2F;javascripte、 image&#x2F;jpeg、 application&#x2F;json</td></tr><tr><td>content-type</td><td align="left">text&#x2F;html;charset&#x3D;utf8 (表明以utf8编码响应字符)</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;); // 获取服务器模块const app = http.createServer(); // app就是网络服务器对象// 当客服端有请求的时候app.on(&#x27;request&#x27; , (req, res) =&gt; &#123;        // 设置响应内容和字符串编码    // 响应 res    res.writeHead(状态码, 内容类型)；    res.writeHead(400, &#123;    &#x27;content-type&#x27;: &#x27;text/html;charset=utf8&#x27;    &#125;)            // 请求方式    if(req.method === &#x27;POST&#x27;) &#123;  // req.method 请求方式        res.end(&#x27;我提交post&#x27;)    &#125; else if (req.method === &#x27;GET&#x27;) &#123;        res.end(&#x27;end&#x27;);    &#125;            // req.url 是请求地址    if (req.url === &#x27;/index&#x27; || req.url === &#x27;/&#x27;) &#123;        res.end(&#x27;welcome homepage&#x27;)    &#125; else if(req.url === &#x27;/list&#x27;) &#123;        res.end(&#x27;welocome list&#x27;)    &#125; else &#123;        res.end(&#x27;not found&#x27;)    &#125;                // req.headers 获取请求报文    &#123; host: &#x27;localhost:3000&#x27;,  connection: &#x27;keep-alive&#x27;,  &#x27;cache-control&#x27;: &#x27;max-age=0&#x27;,  &#x27;upgrade-insecure-requests&#x27;: &#x27;1&#x27;,  &#x27;user-agent&#x27;:&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.80 Safari/537.36&#x27;,  accept:  &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&#x27;,  &#x27;accept-encoding&#x27;: &#x27;gzip, deflate, br&#x27;,  &#x27;accept-language&#x27;: &#x27;zh-CN,zh;q=0.9&#x27; &#125;                                // 服务器发送    // res.end(&#x27;&lt;h1&gt;http&lt;/h1&gt;&#x27;);&#125;)app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h2><p>客户端向服务器端发送请求时， 有时需要向服务端携带一些数据（如用户的信息等）， 这都是通过请求参数的形式传递到服务器端；</p><p><img src="C:\Users\Mloong\AppData\Roaming\Typora\typora-user-images\image-20210530163631713.png" alt="image-20210530163631713"></p><h3 id="GET请求参数"><a href="#GET请求参数" class="headerlink" title="GET请求参数"></a>GET请求参数</h3><p>请求参数被放置在浏览器地址中： 如 <a href="http://localhost:3000/?name=zhangsan&age=20%EF%BC%9B">http://localhost:3000/?name=zhangsan&amp;age=20；</a> 传递了 name： zhangsan   和 age： 20</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.url = http://localhost:3000/index?name=zhangsan&amp;age=20 const url = require(&#x27;url&#x27;);url.parse(req.url)返回的是一个对象&#123; // url 系统模块用来处理url地址，这里处理的是请求地址 返回对象  protocol: null,  slashes: null,  auth: null,  host: null,  port: null,  hostname: null,  hash: null,  search: &#x27;?name=zhangsan&amp;age=20&#x27;,  query: &#x27;name=zhangsan&amp;age=20&#x27;,  pathname: &#x27;/index&#x27;,  path: &#x27;/index?name=zhangsan&amp;age=20&#x27;,  href: &#x27;/index?name=zhangsan&amp;age=20&#x27;  &#125; </span><br></pre></td></tr></table></figure><p><strong>我们只想拿到 name： zhangsan   和 age： 20 这种参数以键值对的形式 用 url.parse(req.url, true), 第二个参数传true 就可以了</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const url = require(&#x27;url&#x27;);url.parse(req.url, true)第二个参数传入true，返回的是一个对象注意 这个对象的 query值  已经是以键值对&#123;  protocol: null,  slashes: null,  auth: null,  host: null,  port: null,  hostname: null,  hash: null,  search: &#x27;?name=zhangsan&amp;age=20&#x27;,  query: [Object: null prototype] &#123; name: &#x27;zhangsan&#x27;, age: &#x27;20&#x27; &#125;,  pathname: &#x27;/index&#x27;,  path: &#x27;/index?name=zhangsan&amp;age=20&#x27;,  href: &#x27;/index?name=zhangsan&amp;age=20&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="POST-请求参数；"><a href="#POST-请求参数；" class="headerlink" title="POST 请求参数；"></a>POST 请求参数；</h3><p>由于post参数不是在url中， 我们不能用req.url 获取；</p><p>*** POST 参数是通过2个事件的方式接受的data事件和end 事件**</p><p>data 事件： 当请求参数传递的时候触发data事件，（有可能是100M的数据，这里每次都是触发data事件）</p><p>end事件：当参数传递完成时候触发end事件</p><p>***post参数处理使用 queryString的parse方法，不同get处理，不能使用url 模块， **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;); // 获取服务器模块const app = http.createServer(); // app就是网络服务器对象const queryString = require(&quot;querystring&quot;); // 处理post请求参数模块// 当客服端有请求的时候app.on(&#x27;request&#x27; , (req, res) =&gt; &#123;    let postParams = &#x27;&#x27;;    req.on(&#x27;data&#x27;, params =&gt; &#123;        postParams +=  params    &#125;)    req.on(&#x27;end&#x27;, () =&gt; &#123;    // 使用queryString.parse() 方法处理参数        let data = queryString.parse(postParams);        console.log(data)        // data是一个对象 &#123;&#125;    &#125;)    res.end(&#x27;ok&#x27;)&#125;)app.listen(3000);</span><br></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>在网站服务中 我们访问 <a href="http://localhost:3000/index">http://localhost:3000/index</a> 是首页 </p><p>访问<a href="http://localhost:3000/login">http://localhost:3000/login</a> 是登录页 这个是通过路由做到的</p><p>路由 是指客户端请求地址与服务器程序代码的对应关系。 简单的说，就是根据不同请求 去响应不同的内容；</p><p>路由当中是一堆判断代码， 根据不同的请求路径 去判断 应该是什么响应内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;); // 获取服务器模块const url = require(&#x27;url&#x27;);const app = http.createServer(); // app就是网络服务器对象// 当客服端有请求的时候app.on(&#x27;request&#x27; , (req, res) =&gt; &#123;    res.writeHead(200, &#123;        &#x27;content-type&#x27;: &#x27;text/html;charset=utf8&#x27;    &#125;)      let &#123;pathname&#125; = url.parse(req.url, true)     if (pathname === &#x27;/index&#x27; || pathname === &#x27;/&#x27;) &#123;        res.end(&#x27;登录页&#x27;)    &#125; else if(pathname === &#x27;/list&#x27;) &#123;        res.end(&#x27;列表页&#x27;)    &#125; else &#123;        res.end(&#x27;没有找到对应内容&#x27;)    &#125;&#125;)app.listen(3000);</span><br></pre></td></tr></table></figure><h1 id="静态资源的处理"><a href="#静态资源的处理" class="headerlink" title="静态资源的处理"></a>静态资源的处理</h1><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><p>客户端向服务器发送一些请求， 服务器不需要做任何的处理， 可以直接响应的文件。 如 js、 css 、 html 、 image 文件</p><p><a href="https://www.itcast.cn/images/logo.png">https://www.itcast.cn/images/logo.png</a></p><p>原理：</p><ol><li>拿到用户的请求路径 default.html； </li><li>去读取磁盘上的物理路径上的文件，然后把这个文件返回给客户端</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);const app = http.createServer();const url = require(&#x27;url&#x27;);const path = require(&#x27;path&#x27;);const fs = require(&#x27;fs&#x27;);app.on(&#x27;request&#x27;, (req, res) =&gt; &#123;   // 1.    let pathname = url.parse(req.url).pathname; // 这里直接获取请求的 不包括参数    let realpath = path.join(__dirname + pathname); // 这里用path将 当前的路径 和 请求路径进行拼接    // 2. 接下来直接调用fs， 进行读取路径下的文件内容； 然后返回    fs.readFile(realpath, (err, result) =&gt; &#123;        if (err) &#123;            res.writeHead(200, &#123;                &#x27;content-type&#x27;: &#x27;text/html;charset=utf8&#x27;            &#125;)            res.end(&#x27;文件读取失败&#x27;);            return;        &#125;        res.end(result) // 返回读取的结果    &#125;)&#125;)</span><br></pre></td></tr></table></figure><h3 id="mime-第三方插件；-可以区分出当前请求的文件类型；-如当前请求的是-html-文件还是-css文件-，-然后设置正确的-响应content-type-从而展示正确的文件"><a href="#mime-第三方插件；-可以区分出当前请求的文件类型；-如当前请求的是-html-文件还是-css文件-，-然后设置正确的-响应content-type-从而展示正确的文件" class="headerlink" title="mime 第三方插件； 可以区分出当前请求的文件类型； 如当前请求的是 html 文件还是 css文件 ， 然后设置正确的 响应content-type 从而展示正确的文件"></a>mime 第三方插件； 可以区分出当前请求的文件类型； 如当前请求的是 html 文件还是 css文件 ， 然后设置正确的 响应content-type 从而展示正确的文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const mime = require(&#x27;mime&#x27;);1. 拿到请求的路径let realpath = path.join(__dirname + pathname); // 这里用path将 当前的路径 和 请求路径进行拼接let type = mime.getType(realpath); // 这里拿到本次正确的文件类型2. 去该路径下去读响应的文件fs.readFile(realpath, (err, result) =&gt; &#123;        if (err) &#123;            res.writeHead(200, &#123;                &#x27;content-type&#x27;: &#x27;text/html;charset=utf8&#x27;            &#125;)            res.end(&#x27;文件读取失败&#x27;);            return;        &#125;        res.writeHead(200, &#123;            &#x27;content-type&#x27;: type // 设置响应内容        &#125;)        res.end(result) // 返回读取的结果    &#125;)</span><br></pre></td></tr></table></figure><h2 id="动态资源："><a href="#动态资源：" class="headerlink" title="动态资源："></a>动态资源：</h2><p>相同的请求地址，返回不同的响应，这种资源就是动态资源</p><p><a href="http://yun.itheima.com/map?id=2">http://yun.itheima.com/map?id=2</a></p><p><a href="http://yun.itheima.com/map?id=1">http://yun.itheima.com/map?id=1</a></p><h1 id="promise-异步-编程解决方案，-解决回调地狱问题"><a href="#promise-异步-编程解决方案，-解决回调地狱问题" class="headerlink" title="promise 异步 编程解决方案， 解决回调地狱问题"></a>promise 异步 编程解决方案， 解决回调地狱问题</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise((resolve, reject) =&gt; &#123;setTimeout(() =&gt; &#123;resolve(&#123;name: &#x27;zhangsan&#x27;&#125;)&#125;, 1000)&#125;)promise.then(res =&gt; &#123;console.log(res) // &#123;name: &#x27;zhangsan&#x27;&#125;&#125;)// 读取文件案例const fs = require(&#x27;fs&#x27;);let promise = new Promise((resolve, reject) =&gt; &#123;fs.readFile(&#x27;./a.js&#x27;, (err, res) =&gt; &#123;if(err) &#123;reject(err)&#125; else &#123;resolve(res)&#125;&#125;)&#125;)promise.then((res) =&gt; &#123;console.log(res) // 文件内容&#125;).catch((err) =&gt; &#123;console.log(err);&#125;)async function fn() &#123;throw &#x27;发生了错误&#x27;&#125;fn().then() &#123;&#125;.catch( e =&gt; &#123;console.log(e)&#125;)</span><br></pre></td></tr></table></figure><h1 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h1><p>普通函数定义前加async 普通函数就变成了异步函数</p><p>异步函数都是返回的promise 对象， return 的值就是 resolve 的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">async function fn() &#123;return 1&#125;fn().then(res) &#123;// fn 执行结果就是一个promise 对象console.log(res) // res 就是 fn函数中 return 的值&#125;.catch( e =&gt; &#123;console.log(e)&#125;)</span><br></pre></td></tr></table></figure><p>await 后面要跟着一个 promise 对象 await 可以暂定异步函数向下执行， 后续的代码等 await 有了结果才执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">async function fn() &#123;</span><br><span class="line">return 1</span><br><span class="line">&#125;</span><br><span class="line">async function fun() &#123;</span><br><span class="line">let f1 = await fn() // fn是异步函数，它执行就是返回一个promise对象</span><br><span class="line">let f2 = await new Promise((res, rej) =&gt; &#123;</span><br><span class="line">res(1)</span><br><span class="line">&#125;) // 这里 new Promise 创建的也是一个promise 对象</span><br><span class="line">let f = f1 + f2</span><br><span class="line">console.log(f)</span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web服务端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css</title>
      <link href="/2019/05/28/css/"/>
      <url>/2019/05/28/css/</url>
      
        <content type="html"><![CDATA[<h1 id="如何画一个三角形-地址"><a href="#如何画一个三角形-地址" class="headerlink" title="如何画一个三角形 地址"></a>如何画一个三角形 <a href="https://zhuanlan.zhihu.com/p/482361933">地址</a></h1><h2 id="border-width-增加，-div-宽度高度变为0，其余三条边-border-color：tarnsparent"><a href="#border-width-增加，-div-宽度高度变为0，其余三条边-border-color：tarnsparent" class="headerlink" title="border-width 增加， div 宽度高度变为0，其余三条边 border-color：tarnsparent"></a>border-width 增加， div 宽度高度变为0，其余三条边 border-color：tarnsparent</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 首先一个正常的<span class="selector-tag">div</span>，这是一个很正常的<span class="selector-tag">div</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid block;</span><br><span class="line">    <span class="attribute">border-top-color</span>: red;</span><br><span class="line">    <span class="attribute">border-left-color</span>: blue;</span><br><span class="line">    <span class="attribute">border-right-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 我们将<span class="attribute">border-width</span> 变大， 同时将<span class="attribute">width</span>，<span class="attribute">height</span> 变为<span class="number">0</span>,同时将其与三条边的边框颜色 设置为</span><br><span class="line">//transparent</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>: transparent;</span><br><span class="line">    <span class="attribute">border-left-color</span>: transparent;</span><br><span class="line">    <span class="attribute">border-right-color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="画一个长方形使用liear-grident-线性渐变的方法绘制出来"><a href="#画一个长方形使用liear-grident-线性渐变的方法绘制出来" class="headerlink" title="画一个长方形使用liear-grident 线性渐变的方法绘制出来"></a>画一个长方形使用liear-grident 线性渐变的方法绘制出来</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">outline</span>: <span class="number">2px</span> solid skyblue;</span><br><span class="line">   <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">32deg</span>, orangered <span class="number">50%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">50%</span>), <span class="built_in">linear-gradient</span>(<span class="number">148deg</span>, orangered <span class="number">50%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: top left, bottom left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="clip-path-这个属性就是用来绘制多边形或者圆和椭圆的"><a href="#clip-path-这个属性就是用来绘制多边形或者圆和椭圆的" class="headerlink" title="clip-path  这个属性就是用来绘制多边形或者圆和椭圆的"></a>clip-path  这个属性就是用来绘制多边形或者圆和椭圆的</h2><p>这个div的是一个长方形<br>这个值是怎么来的呢？使用 clip-path 可以为沿路径放置的每个点定义坐标。在这种情况下，就定义了三个点：top-left (0 0)、bottom-left (0% 100%)、right-center (100% 50%)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0</span>, <span class="number">0%</span> <span class="number">100%</span>, <span class="number">100%</span> <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="首先将一个正方形tranfrom：-rotate-45deg-2d的旋转45度-转成菱形，-然后用个另一个div-定位盖住"><a href="#首先将一个正方形tranfrom：-rotate-45deg-2d的旋转45度-转成菱形，-然后用个另一个div-定位盖住" class="headerlink" title="首先将一个正方形tranfrom： rotate(45deg) 2d的旋转45度,转成菱形， 然后用个另一个div 定位盖住"></a>首先将一个正方形tranfrom： rotate(45deg) 2d的旋转45度,转成菱形， 然后用个另一个div 定位盖住</h2><h1 id="px-x2F-em-x2F-rem-x2F-vw的区别"><a href="#px-x2F-em-x2F-rem-x2F-vw的区别" class="headerlink" title="px&#x2F;em&#x2F;rem&#x2F;vw的区别"></a>px&#x2F;em&#x2F;rem&#x2F;vw的区别</h1><ol><li><p>px 是 pixel像素的缩写，是一个相对单位，基于屏幕的分辨率</p><ul><li>px值必须是整数，</li><li>in 表示英寸</li><li>cm 表示厘米</li><li>mm 表示毫米</li></ul></li><li><p>em 是相对单位， 如果自身定义了font-size那么就按照自身为参考 ，否则就往父级查找，知道找到html，<br> 浏览器的默认字体是16px， 所以 0.5em &#x3D; 16px * 0.5 &#x3D; 8px;</p></li><li><p>rem 是root+ em的意思，它的参考物是html的font-size值</p></li><li><p>vw是view width的缩写 1vw &#x3D; 浏览器视图区域的1&#x2F;100 ； 视图区域不包括工具栏和按钮的</p></li><li><p>pt:point，大约1&#x2F;72寸<br>绝对长度单位，多用于字体尺寸，1px &#x3D; 0.75pt。</p></li></ol><h1 id="BFC的理解-cankao1"><a href="#BFC的理解-cankao1" class="headerlink" title="BFC的理解 cankao1"></a>BFC的理解 <a href="https://wybing.blog.csdn.net/article/details/112447876?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-112447876-blog-125100383.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-112447876-blog-125100383.pc_relevant_default&utm_relevant_index=1">cankao1</a></h1><p><a href="http://blog.tiaozaoj.com/index.php/archives/221/">cankao2</a><br>其中FC是formatting context的首字母缩写，直译过来是格式化上下文，它是页面中的一块独立的渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。</p><h2 id="触发BFC条件"><a href="#触发BFC条件" class="headerlink" title="触发BFC条件"></a>触发BFC条件</h2><p>根元素（html就是根元素，整个html就是一个独立的BFC）<br>float属性不为none（如：left | right）<br>overflow的值不为visible（如：hidden | auto | scroll）<br>display属性值为inline-block | flex | inline-flex | table-cell | table-caption<br>position为absolute或fixed</p><h2 id="应用BFC"><a href="#应用BFC" class="headerlink" title="应用BFC"></a>应用BFC</h2><p>解决margin塌陷问题<br>也就是解决，在一个标准流body（body元素就是一个BFC）中相邻盒子之间垂直margin重叠的问题。<br>方法：触发其中一个盒子的BFC，成为一个独立的容器，根据BFC规则，这个盒子的布局不受外部元素影响。<br>解决高度塌陷问题<br>当一个标准流中的盒子中所有的子元素都进行了浮动，并且没有给盒子设置高度时，那么这个盒子的整个高度就会塌陷，浮动的子元素高度不计算在父元素内，父元素高度就为0。<br>方法：触发这个盒子生成BFC，根据规则计算BFC的高度时，浮动元素也参与计算。</p><h1 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h1><p>伪类：伪类是用来定义元素特殊状态的，他可以用来设置鼠标悬停样式、元素获取焦点样式、设置链接样式等。如常见的 hover、active、link 等都是伪类。</p><p>伪元素：伪元素也称为伪对象，它不存在于 DOM 文档中、是一个虚拟的元素。它可以用来代表某个元素的子元素，但是这个子元素并不存在于文档树中。比如::before表示选择元素内容的之前内容，也就是””；</p><p>伪类和伪元素的根本区别在于：是否创造了新的元素。</p><h1 id="核模型-ie核模型和标准核模型的区别"><a href="#核模型-ie核模型和标准核模型的区别" class="headerlink" title="核模型 ie核模型和标准核模型的区别"></a>核模型 ie核模型和标准核模型的区别</h1><h2 id="ie核模型ie5-5之前的是ie核模型"><a href="#ie核模型ie5-5之前的是ie核模型" class="headerlink" title="ie核模型ie5.5之前的是ie核模型"></a>ie核模型ie5.5之前的是ie核模型</h2><p> <strong>widht &#x3D; content + padding + borderWdith</strong><br>也就是说其宽度width 是 content + padding + border，此时div所占实际大小就是width<br>box-sizing： border-box </p><h2 id="标准核模型"><a href="#标准核模型" class="headerlink" title="标准核模型"></a>标准核模型</h2><p><strong>width &#x3D; content</strong>  宽度就是content内容<br>box-sizing： content-box<br>此时一个div所占大小是width（content）+ padding + width</p><p>box-sizing: border-box | content-box | inherit(继承父级的box-sizing属性)</p><h1 id="grid-x2F-table-x2F-flex"><a href="#grid-x2F-table-x2F-flex" class="headerlink" title="grid &#x2F; table &#x2F; flex"></a>grid &#x2F; table &#x2F; flex</h1><h1 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h1><p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">grid布局</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">// 容器属性</span><br><span class="line"><span class="selector-class">.pr</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template</span>-column: <span class="number">10px</span>, <span class="number">20px</span>, <span class="number">30px</span>, // 定义了<span class="number">3</span>列 每列宽度分别是 <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span>；</span><br><span class="line">    grid-template-column: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">50%</span>) //定义<span class="number">2</span>列， 每列宽度占<span class="number">50%</span></span><br><span class="line">    grid-template-column: <span class="built_in">repeat</span>(auto-fill， <span class="number">100px</span>)；表示每列宽度<span class="number">100px</span>，但是每列尽可能填充多个单元格</span><br><span class="line">    grid-template-column: <span class="number">1</span>fr， <span class="number">2</span>fr， <span class="number">3</span>fr</span><br><span class="line">    // fr是fraction缩写表示片段 表示三列，第二列宽度是第一列的一倍，第三列是第一列的<span class="number">3</span>倍</span><br><span class="line"></span><br><span class="line">    grid-template-column：<span class="number">10px</span>, <span class="built_in">maxmin</span>(<span class="number">100px</span>, <span class="number">50px</span>); 表示<span class="number">2</span>列， 第二列的宽度在<span class="number">100px</span>和<span class="number">50px</span>范围内</span><br><span class="line">    <span class="attribute">grid-template</span>-column：<span class="number">10px</span>， auto// auto表示第二列宽度由浏览器决定</span><br><span class="line"></span><br><span class="line">    <span class="attribute">grid-column</span>-<span class="attribute">gap</span>： <span class="number">10px</span>； // <span class="attribute">gap</span>表示间距空白处， 表示每列之间的间距是<span class="number">10px</span></span><br><span class="line">    <span class="attribute">grid-row</span>-<span class="attribute">gap</span>：<span class="number">20px</span> // 每行行间距是<span class="number">20px</span></span><br><span class="line">    <span class="attribute">grid-gap</span>： <span class="number">20px</span>， <span class="number">10px</span>； &lt;<span class="attribute">grid-row</span>-<span class="attribute">gap</span>&gt; 和 &lt;<span class="attribute">grid-column</span>-<span class="attribute">gap</span>&gt; 的缩写</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: [c1] <span class="number">100px</span> [c2] <span class="number">100px</span> [c3] auto [c4];</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: [r1] <span class="number">100px</span> [r2] <span class="number">100px</span> [r3] auto [r4];</span><br><span class="line"></span><br><span class="line">    // 先划分出<span class="number">9</span>个单元格，然后将其定名为<span class="selector-tag">a</span>到<span class="selector-tag">i</span>的九个区域，分别对应这九个单元格。</span><br><span class="line">    <span class="attribute">grid-template-areas</span>: <span class="string">&#x27;a b c&#x27;</span></span><br><span class="line">                       <span class="string">&#x27;d e f&#x27;</span></span><br><span class="line">                       <span class="string">&#x27;g h i&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 多个单元格合并成一个区域的写法如下</span><br><span class="line">    <span class="attribute">grid-template-areas</span>: <span class="string">&#x27;a a a&#x27;</span></span><br><span class="line">                     <span class="string">&#x27;b b b&#x27;</span></span><br><span class="line">                     <span class="string">&#x27;c c c&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    // 划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是&quot;先行后列&quot;，</span><br><span class="line">    // 即先填满第一行，再开始放入第二行，即下图数字的顺序</span><br><span class="line">    // <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">    // <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    //但是这个顺序可以改变 默认是 row 先行后列 ； </span><br><span class="line">    // <span class="number">1</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line">    // <span class="number">2</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">    <span class="attribute">grid-auto-flow</span>: column; // 先列后行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    justify-items: start | end | end | stretch; //  单元格内容水平对齐方式</span><br><span class="line">    <span class="attribute">align-items</span>: start | end | center | stretch; // 垂直对齐</span><br><span class="line"></span><br><span class="line">    // 整个整个表格在容器中的布局</span><br><span class="line">    <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly; </span><br><span class="line">    // space-around 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</span><br><span class="line">    // space-between 项目与项目的间隔相等，项目与容器边框之间没有间隔。</span><br><span class="line">    // space-evenly 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</span><br><span class="line"></span><br><span class="line">    <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  项目属性</span><br><span class="line">&#123;</span><br><span class="line">    <span class="selector-class">.item-1</span> &#123;</span><br><span class="line">        justify-self:  start | end | center | stretch ;</span><br><span class="line">        <span class="attribute">align-self</span>: start | end | center | stretch; </span><br><span class="line">        place-self: &lt;align-self&gt; &lt;justify-self&gt;; // 合体属性</span><br><span class="line">        <span class="attribute">grid-area</span>: a  // 属性指定项目放在哪一个区域</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><p><a href="">table</a></p><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">flex语法篇</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">实例篇</a><br>将一个元素设置为 display： flex 或者 inline-flex 这个元素称为flex容器；子元素称为flex项目</p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">    <span class="attribute">flex-wrap</span>:  wrap | nowrap | wrap-reverse; <span class="comment">/** wrap-reverse 表示 换行，第一行在下方。*/</span></span><br><span class="line">    <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;; </span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">    <span class="comment">/**baseline 表示项目的第一行文字的基线对齐 */</span></span><br><span class="line">    <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex项目属性"><a href="#flex项目属性" class="headerlink" title="flex项目属性"></a>flex项目属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: -<span class="number">1</span>;<span class="comment">/* 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。 */</span></span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="comment">/**</span></span><br><span class="line"><span class="comment">    grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，不放大。</span></span><br><span class="line"><span class="comment">    grow属性为1，则它们将等分剩余空间（如果有的话）</span></span><br><span class="line"><span class="comment">    grwo为2， 其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>; <span class="comment">/**</span></span><br><span class="line"><span class="comment">    项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</span></span><br><span class="line"><span class="comment">    属性都为1，当空间不足时，都将等比例缩小</span></span><br><span class="line"><span class="comment">    shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）</span></span><br><span class="line"><span class="comment">    计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小（width或者height的值）。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ];</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        两个快捷值：auto (1 1 auto) 会放大，也会缩小 等同于 </span></span><br><span class="line"><span class="comment">                和 none (0 0 auto)。有剩余空间也不会放大，也不会缩小</span></span><br><span class="line"><span class="comment">                flex : 1 等同于 flex: auto</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        align-self的权重比align-items高用来设置单个项目的对齐方式</span></span><br><span class="line"><span class="comment">        默认是auto，继承了align-items，没有父元素等同于stretch</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="css3的新增属性"><a href="#css3的新增属性" class="headerlink" title="css3的新增属性"></a>css3的新增属性</h1><h1 id="如何将一个盒子水平垂直居中"><a href="#如何将一个盒子水平垂直居中" class="headerlink" title="如何将一个盒子水平垂直居中"></a>如何将一个盒子水平垂直居中</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">// <span class="number">1</span>. 用<span class="attribute">display</span> ： <span class="selector-tag">table</span>-cell； <span class="attribute">text-align</span>: center; <span class="attribute">vertical-align</span>: middle</span><br><span class="line">.box&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2. 已知父级盒子的height， 子元素设置 margin： 父级盒子高度的一半 减去 子元素高度的一半 */</span></span><br><span class="line">    <span class="selector-class">.fa</span>&#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: black;</span><br><span class="line">      <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 子容器样式 */</span></span><br><span class="line">    <span class="selector-class">.son</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: white;</span><br><span class="line">      <span class="comment">/* 水平垂直居中 */</span></span><br><span class="line">      <span class="comment">/* 父级盒子高度的一半 减去 子元素高度的一半 */</span></span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">250px</span> auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    3. 父元素相对定位，子元素绝对定位，并且子元素 top，left，bottom，right设置为0，margin：auto</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">/* 父容器 */</span></span><br><span class="line">    <span class="selector-class">.fa</span>&#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">700px</span>;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">background-color</span>: black;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 子容器 */</span></span><br><span class="line">    <span class="selector-class">.son</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: white;</span><br><span class="line">      <span class="attribute">position</span>:absolute;</span><br><span class="line">      <span class="comment">/* 水平垂直居中 */</span></span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">margin</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    4. 父元素相对定位，子元素绝对定位，并且子元素 top： 50%，，left：50%，</span></span><br><span class="line"><span class="comment">    margin-top: 子元素高度一半的负值</span></span><br><span class="line"><span class="comment">    margin-left: 子容器宽度一半的负值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="selector-class">.pa</span>&#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">700px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: black;</span><br><span class="line">       <span class="comment">/* 父容器开启相对定位*/</span></span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 子容器 */</span></span><br><span class="line">    <span class="selector-class">.son</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: white;</span><br><span class="line">      <span class="comment">/* 子容器开启绝对定位*/</span></span><br><span class="line">      <span class="attribute">position</span>:absolute;</span><br><span class="line">      <span class="comment">/* 水平垂直居中 */</span></span><br><span class="line">      <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">margin-top</span>: -<span class="number">150px</span>; <span class="comment">/** 子元素高度一半的负值 */</span></span><br><span class="line">      <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    原理同上先通过绝对定位将div定位到上，左各一半的位置，然后通过translate，向上或者向左移动自身一半的位置。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">    <span class="selector-class">.fa</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000000</span>;</span><br><span class="line">        <span class="attribute">background</span>:<span class="number">#ddd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.children</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>; </span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">        <span class="attribute">background</span>:green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    flex布局</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">/* 父容器 */</span></span><br><span class="line">    <span class="selector-class">.fa</span>&#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">700px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: black;</span><br><span class="line">      <span class="comment">/* 父容器开启flex布局 */</span></span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="comment">/* 水平垂直居中 */</span></span><br><span class="line">      <span class="attribute">justify-content</span>: center;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
