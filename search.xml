<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title> py</title>
      <link href="/2023/02/28/py/"/>
      <url>/2023/02/28/py/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node</title>
      <link href="/2023/02/28/node/"/>
      <url>/2023/02/28/node/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2023/02/28/webpack/"/>
      <url>/2023/02/28/webpack/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react</title>
      <link href="/2023/02/28/react/"/>
      <url>/2023/02/28/react/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2023/02/28/vue/"/>
      <url>/2023/02/28/vue/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> vue2.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts</title>
      <link href="/2023/02/28/ts/"/>
      <url>/2023/02/28/ts/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/28/hello-world/"/>
      <url>/2023/02/28/hello-world/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js</title>
      <link href="/2022/03/28/js/"/>
      <url>/2022/03/28/js/</url>
      
        <content type="html"><![CDATA[<p>在url地址栏输入 地址访问 经历 ：<br>    1. 浏览器把输入的网址，解析为ip；<br>    1.1 首先查找浏览器缓存，如果有缓存，那么直接返回ip，否则进行下一步<br>    1.2 查看系统缓存， 浏览器进行系统调用（window 的gethostname ），查找host文件， 直接返回ip； 没有下一步<br>    1.3 查找路由器缓存， 借助网络，查找isp服务商缓存的DNS服务器，找到返回ip，没有下一步<br>    （递归查询， 迭代查询）<br>    2. 浏览器与目标建立tcp连接：<br>    2.1 主机浏览器拿到目标服务器的ip地址后， 与服务器建立tcp连接<br>    2.2 tcp3次握手建立连接：<br>            第一次：浏览器所在的主机（本机）向目标服务器发出请求报文（SYN标志为1）<br>            第二次：目标服务器接受报文后，同意建立连接，向客户端发出确认报文（SYN, ACK 标志均为1）<br>            第三次：客户端确认收到报文后，再次向服务器发出报文，确认已收到确认报文（客户端与服务器TCP连接确认完成，开始通信）<br>   3. 浏览器通过http协议发送请求<br>    浏览器发送一个HTTP-GET 方法报文请求。 请求中包含URL， KeepAlive 长连接，还有 User-Agent<br>    用户浏览器操作系统信息，编码等。 其中Accep-Encoding （压缩gzip）和 Cookies（用户首次访问，会提示<br>    服务器建立用户缓存信息， 不是首次访问利用Cookies对应的键值对，找到相应的缓存，缓存中存放着用户名，密码和一些用户设置项）项，<br>    4. 某些服务会做永久重定向响应：<br>    大型网站 一般不会直接返回请求页面，（状态码不是200， 而是301,302 以3开头的重定向码，浏览器获取了重定向响应<br>    后，在响应报文中获取到location项找到重定向地址，重新第一步访问即可）<br>        重定向作用： 主要是2点 : 1.为了负载均衡（减少服务器压力）；  2.重定向可以将多个域名的访问，集中多一个站点<br>            如：baidu.com 和 <a href="http://www.baidu.com/">www.baidu.com</a> 搜索引擎认为是两个网站，永久重定向会将两个地址关联起来<br>            ，搜索引擎任务是同一个网站，提高排名<br>    5. 浏览器跟踪重定向地址： 浏览器拿到重定向地址后，重新发送一个http请求<br>    6. 服务器处理请求： 服务器收到获取请求，处理并返回一个响应报文。<br>    7. 根据报文的Content-type  响应文件呈现形式<br>    8. 释放tcp连接:<br>    8.1 浏览器所在的主机向服务器发出连接释放报文，然后停止发送数据；<br>    8.2 服务器接收到报文后确认报文，然后将服务器上未传送完的数据发送完；<br>    8.3 服务器数据传输完毕后，向客户端发送连接释放报文；<br>    8.4 客户端接受到报文后，发出确认，然后释放tcp连接<br>    9. 浏览器根据对应的渲染机制 渲染html</p><ol><li><p>浏览器渲染原理<br> 首先下载静态资源<br> 解析html时，发现其中有其他外部资源链接 如css、js、图片等， 会立即开启其他线程下载。<br> 当外部资源下载js时， html解析会停下来。 等js下载 执行结束后才继续 解析HTML<br> 解析html&#x3D;》构建DOM树<br> 解析CSS &#x3D;&gt; 构建CSSOM树<br> 利用DOM 和 CSSOM树 构建 Render树<br> 进行布局 layout<br> 进行绘制painting 到屏幕上</p><p> 当某个部分发生改变，影响到布局， 进行重排 reflow<br> 当某个元素背景、边框颜色等发生改变， 进行重回 repaint</p></li><li><p>变量<br> let 在同一个作用域中，不能重复声明同一个变量。 for 循环 判断条件和 代码块中 是两个作用域<br> let 声明的变量不能 变量提升到 顶层。   &#x3D;》 导致存在暂时性 死区。</p><p> const 同let 一样。 const 声明的变量 内存地址不能改变</p></li><li><p>结构赋值<br> let {foo: {bar}} &#x3D; {baz: ‘baz’}; &#x2F;&#x2F; 会报错<br> 原因很简单，因为foo这时等于undefined，再取子属性就会报错，请看下面的代码。 </p><ol><li>数组的 结构赋值</li><li>对象的结构赋值</li><li>let arr &#x3D; [1, 2, 3] ；<br> let {0：a, [arr.length-1]: b, 1:c} &#x3D; arr &#x2F;&#x2F; 此时将数组转化为 伪数组对象</li><li>字符串的结构赋值 &#x3D;》 转化为 伪数组对象 const [a,b] &#x3D; ‘hi’  let {length: len} &#x3D; ‘hello’</li><li>数值和布尔值的结构赋值 数值和布尔值 都有 封装的toString 属性， 因此<br> let {toString：s} &#x3D; 123；<br> let {toString：s} &#x3D; true；</li><li>let {proxy： x} &#x3D; undefined  报错 let {prop： x} &#x3D; null<br> null 和 undefined 没有包装对象。 对他们进行结构都会报错</li><li>函数参数的解构赋值</li></ol></li><li><p>字符串：</p><ol><li>“hellow”.charAt(0)， 返回0处的 值  &#x3D;》 h</li><li>‘hellow’.charCodeAt(0), 返回0处值 的 unicode 编码 是一个数字<br> String.fromCharCode(数字) &#x3D;》 将 unicode 编码数字 转化为对应的 字符串</li><li>字符串是已UTF-16 格式储存， 每个字符固定是 2个字节。 对于 4个字节储存的 字符， js认为是2个字符<br>ES3 提供了 codePointAt方法，能够正确处理4个字节储存的字符。 返回一个字符的 码点 数字<br>   “级”.codePointAt(0) &#x2F;&#x2F; 32423<br>  Strgin.fromCodePoint(32423) &#x3D;&gt; ‘级’</li></ol></li><li><p>函数<br> length 属性 含义： 该函数预期传入的参数个数， 某个参数指定默认值后， 预期参数个数就不包括这个参数<br>     rest 参数也不计入length属性； 因为rest 意义就是 不知道会传入几个参数，统一代替的<br> (function (a &#x3D; 0, b, c) {}).length &#x2F;&#x2F; 0<br> (function (a, b &#x3D; 1, c) {}).length &#x2F;&#x2F; 1  如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了。</p><p> 默认参数，函数声明初始化时，参数会形成一个单独的作用域。  有且只有设置默认值时，才会出现 这个作用域</p></li></ol><p>arguments.callee 指向  是arguments 的一个属性指向正在运行的 函数<br>（function（） {}）.caller 是函数的一个 一个属性 指向正在运行的 函数 在window 下 调用 直接是null<br>6.箭头函数<br>    如果箭头函数直接返回一个对象， 就必须在对象外面加上括号，否则会报错： let getTime &#x3D; time &#x3D;&gt; ({time: Date.now()});</p><p> Vue 通过建立一个虚拟DOM 来追踪自己如果要改变真实DOM<br>return createElement（’h1’, this.title）； &#x3D;》》 createElement 函数返回的就是一个{Vnode} 虚拟 节点 </p><p>Vue的生命周期</p><ol><li><p>beforeCreate 实例创建之前除非，不能访问data computed watch 的数据<br>2.created 实例创建后发生， 可以访问data中的数据， 当前不能与dom 进行交互</p></li><li><p>beforeMount 发生在挂载之前， 此时虚拟dom已经创建完成<br>4.mounted 在挂载完成后发生， 真实的dom挂载完成，数据完成双向绑定；可以访问dom节点，</p></li><li><p>beforeUpdate 发生在更新之前，响应式数据更新，但是虚拟dom还没有渲染，<br>6.updated 发生在更新完成之后，当前阶段组件dom已经更新完成<br>7.beforeDestory 发生在实例销毁之前，在当前阶段实例可以被使用， 我们可以清除计时器等<br>8.destoryed 发生在实例销毁之后， 这个时候组件被拆解，数据被卸载，监听被移除</p></li><li><p>实例创建之前，不能访问data 、 实例创建之后；可以访问到data数据； 不能与 dom 进行交互<br> 挂载之前， 此时虚拟dom已经创建完成；  挂载之后完成； 真实的dom完成挂咋； 数据完成双向绑定；可以访问dom节点<br>发生再更新之前， 响应式数据； 但是虚拟dom 没有渲染之前被触发；  发生再更新完成之后， 当前阶段组件dom已经更新完成<br>发生再实例销毁之前， 此时实例可以被调用  发生再实例销毁之后， 这个时候组件被拆解 数据被卸载， 监听被移除</p></li></ol><p>Vue.extend() 创建vue 的一个子类<br>nextTick 异步队列，主要是监听DOM 更新完成；<br>主要当前浏览器环节使用 promise mutationObserver setImmediate 或者 setTimout方法</p><p>Vue2.x 监听数组的变化： vue 会将数组的原型方法进行重写； 每次调用时，会监听到数组的更改，然后通知视图进行更新；<br> 如果是有引用类型，那么就对数组进行递归进行监听，</p><p>1.浮动 影响自身 和同级后面元素的位置<br>2.浮动会造成父级高度的塌陷；影响正常文档流布局； 所以需要清除浮动<br>    1.清除浮动的方法: 给父级 添加overflow hidden属性； 给浮动元素同级后面 添加一个div元素，设置clear:both<br>    ; 给父级设置伪类：after {display: block; content: ‘’; visibility:hidden;clear:both; height:0} 三种方法<br>3. </p><p>key值： vue为了尽可能降低dom操作，尽可能的复用已有的dom 而非重新渲染；key的作用是给节点一个唯一标识，<br>以便能够再操作dom时找到可以复用的节点；</p><p>keep-alive 的用法 缓存动态组件； vue2.0版本后， 内置组件已经封装了两个属性， include 表示缓存的组件； exclude表示不需要缓存<br>    可以是名字或者 </p><p>2.4 $attrs 和 $listeners 属性<br>inheritAttrs 默认是 true 继承所有父组件属性,除了props 的特定绑定;作为普通的html属性应用在 子组件的根元素;<br>如果inheritAttrs是false，但是class 属性会继承；</p><p>$listeners–属性，它是一个对象，里面包含了作用在这个组件上的所有监听器，你就可以配合 v-on&#x3D;”$listeners”<br>将所有的事件监听器指向这个组件的某个特定的子元素。</p><p>inheritAttrs 继承所有的属性 除了props； </p><p>模块化的前世今生<br>模块化就是将一个复杂的系统分解成多个独立的模块； 之前都是通过一系列的script 标签来维护 模块之前的关系；<br>但是一旦项目复杂。 这个方式 就会使我们的代码混乱不堪；<br>由于早期官方 并没有提供统一的解决方案，所以早期 关于模块化方案层出不穷。<br>IIFE ： 模块化的一大作用就是用来隔离作用域，避免变量冲突； 最早为了避免与全局变量污染， 智能使用闭包来实现模块化。<br>（function (window) {<br>    window.query &#x3D; {} ;<br>}）(window)<br>&#x2F;&#x2F; 虽然IIFE 有效解决了命名冲突的问题， 但是对于依赖管理， 还是束手无策。 因为浏览器时自上而下的执行脚本；为了维持脚本<br>间的依赖关系；就必须手动维护好script 标签 相对顺序<br>AMD： 一种模块化规范， 主要提供了异步加载功能；  需要使用RequireJS去实现模块化；  所有的依赖像必须提前声明好；<br>在导入模块的时候，也会先加载对应的依赖模块， 然后再执行后续代码，AMD可以并发加载所有的依赖模块；<br>define（’.&#x2F;index.js’, function(code) {<br>    &#x2F;&#x2F; code 时index.js 返回的内容<br>return {<br>    }<br>}）<br>CMD：通由阿里玉伯提出；通AMD类型， CMD需要SeaJS 库来实现模块化；同AMD 一样； CMD也是为了解决 依赖管理问题；<br>define（function （require） {<br>    var path &#x3D; require.resolve(‘.&#x2F;cmdDefine’);<br>    alert(path)<br>）<br>  CMD 加载完某个依赖模块后并不执行，只是下载而已， 再所有依赖模块加载完成后进入主逻辑， 如果 require语句才执行<br>对应的模块， 用require.asynce（） 可以实现赖加载<br>CommonJS， 随着模块化深入； 需要一种标准的模块化方案； 此时commonJS 应运而生； node.js应用就是采用这个规范；<br>内置module对象 定义模块； require 函数来加载模块文件<br>var add &#x3D; funciton（a, b） {}<br>module.exports &#x3D; {<br>    add: add<br>}</p><p>&#x2F;&#x2F; 加载模块<br>var utils &#x3D; require（’.&#x2F;utils’）<br>console.log(utils.add(1,2)) &#x2F;&#x2F; 3<br>这种模块化方案特点就是：同步阻塞式加载，无法实现按需异步加载。如果时浏览器环境使用CommonJS 模块 需要Browserify<br>进行解析；</p><p>UMD： 上面CommonJs 合AMD 等模块化方案都是针对特定的平台； 如果想要实现 跨平台的模块化， 可以兼容 AMD 合 commonJs<br>等模块化语法</p><p>ES6 modules<br>export<br>import</p><p>CommonJS 合 ES6 模块的两大差异</p><ol><li>CommonJS 输出的是一个值的拷贝； Es6模块输出的是一个值的引用</li><li>CommonJS 模块是运行时加载， es6模块时编译时输出接口</li></ol><p>第二个差异是因为 CommonJS 加载的是一个对象（module.exports 属性），<br>该对象只有在脚本运行完才会生成。 </p><p>而es6模块不是对象； 它的对外接口只是一种静态定义’</p><p>第一个差异CommonJS 输出的是一个值的拷贝</p><p>&#x2F;&#x2F; lib.js<br>var counter &#x3D; 3;<br>function incCounter() {<br>   counter++<br>}<br>module.exports &#x3D; {<br>    counter: counter,<br>    incCounter: incCounter<br>}</p><p>&#x2F;&#x2F; main,js 里面加载这个模块<br>var mod &#x3D; require(‘.&#x2F;lib’);<br>console.log(mod.counter); &#x2F;&#x2F; 3<br>mod.incCounter();<br>console.log(mod.counter); &#x2F;&#x2F; 3 这里说明 lib.js 模块加载以后， 它的内部变化影响不到输出的 mod.counter 了；<br>除非写成一个函数，才能得到内部变动后的值。</p><p>&#x2F;&#x2F; lib.js<br>var counter &#x3D; 3；<br>function incCounter（） {<br>    counter++<br>}<br>module.exports &#x3D; { &#x2F;&#x2F; 此时输出的其实是一个 取值器函数<br>    get counter() {<br>        return counter<br>    },<br>    incCounter: incCounter<br>}</p><div></div><p>es6 模块的运行机制与CommonJS 不一样。 JS引擎对脚本静态分析的时候，遇到模块加载命令 import，<br>就会生成一个只读的引用。 等到脚本真正执行时，再根据这个只读的引用， 到被加载的哪个模块里面去取值；<br>（es6模块时动态引用，并且不会缓存值， 模块里面的变量绑定其所在的模块）</p><p>&#x2F;&#x2F; lib.js<br>export let counter &#x3D; 3；<br>export function incCounter() {<br>    coun3ter++;<br>}</p><p>&#x2F;&#x2F; mian.js<br>import {counter, incCounter} from ‘.&#x2F;lib’;<br>console.log(counter); &#x2F;&#x2F; 3<br>incCounter();<br>console.log(counter); &#x2F;&#x2F; 4<br>{}</p>]]></content>
      
      
      <categories>
          
          <category> 前端js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css</title>
      <link href="/2019/05/28/css/"/>
      <url>/2019/05/28/css/</url>
      
        <content type="html"><![CDATA[<h1 id="如何画一个三角形-地址"><a href="#如何画一个三角形-地址" class="headerlink" title="如何画一个三角形 地址"></a>如何画一个三角形 <a href="https://zhuanlan.zhihu.com/p/482361933">地址</a></h1><h2 id="border-width-增加，-div-宽度高度变为0，其余三条边-border-color：tarnsparent"><a href="#border-width-增加，-div-宽度高度变为0，其余三条边-border-color：tarnsparent" class="headerlink" title="border-width 增加， div 宽度高度变为0，其余三条边 border-color：tarnsparent"></a>border-width 增加， div 宽度高度变为0，其余三条边 border-color：tarnsparent</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 首先一个正常的<span class="selector-tag">div</span>，这是一个很正常的<span class="selector-tag">div</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid block;</span><br><span class="line">    <span class="attribute">border-top-color</span>: red;</span><br><span class="line">    <span class="attribute">border-left-color</span>: blue;</span><br><span class="line">    <span class="attribute">border-right-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 我们将<span class="attribute">border-width</span> 变大， 同时将<span class="attribute">width</span>，<span class="attribute">height</span> 变为<span class="number">0</span>,同时将其与三条边的边框颜色 设置为</span><br><span class="line">//transparent</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>: transparent;</span><br><span class="line">    <span class="attribute">border-left-color</span>: transparent;</span><br><span class="line">    <span class="attribute">border-right-color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="画一个长方形使用liear-grident-线性渐变的方法绘制出来"><a href="#画一个长方形使用liear-grident-线性渐变的方法绘制出来" class="headerlink" title="画一个长方形使用liear-grident 线性渐变的方法绘制出来"></a>画一个长方形使用liear-grident 线性渐变的方法绘制出来</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">outline</span>: <span class="number">2px</span> solid skyblue;</span><br><span class="line">   <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">32deg</span>, orangered <span class="number">50%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">50%</span>), <span class="built_in">linear-gradient</span>(<span class="number">148deg</span>, orangered <span class="number">50%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: top left, bottom left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="clip-path-这个属性就是用来绘制多边形或者圆和椭圆的"><a href="#clip-path-这个属性就是用来绘制多边形或者圆和椭圆的" class="headerlink" title="clip-path  这个属性就是用来绘制多边形或者圆和椭圆的"></a>clip-path  这个属性就是用来绘制多边形或者圆和椭圆的</h2><p>这个div的是一个长方形<br>这个值是怎么来的呢？使用 clip-path 可以为沿路径放置的每个点定义坐标。在这种情况下，就定义了三个点：top-left (0 0)、bottom-left (0% 100%)、right-center (100% 50%)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0</span>, <span class="number">0%</span> <span class="number">100%</span>, <span class="number">100%</span> <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="首先将一个正方形tranfrom：-rotate-45deg-2d的旋转45度-转成菱形，-然后用个另一个div-定位盖住"><a href="#首先将一个正方形tranfrom：-rotate-45deg-2d的旋转45度-转成菱形，-然后用个另一个div-定位盖住" class="headerlink" title="首先将一个正方形tranfrom： rotate(45deg) 2d的旋转45度,转成菱形， 然后用个另一个div 定位盖住"></a>首先将一个正方形tranfrom： rotate(45deg) 2d的旋转45度,转成菱形， 然后用个另一个div 定位盖住</h2><h1 id="px-x2F-em-x2F-rem-x2F-vw的区别"><a href="#px-x2F-em-x2F-rem-x2F-vw的区别" class="headerlink" title="px&#x2F;em&#x2F;rem&#x2F;vw的区别"></a>px&#x2F;em&#x2F;rem&#x2F;vw的区别</h1><ol><li><p>px 是 pixel像素的缩写，是一个相对单位，基于屏幕的分辨率</p><ul><li>px值必须是整数，</li><li>in 表示英寸</li><li>cm 表示厘米</li><li>mm 表示毫米</li></ul></li><li><p>em 是相对单位， 如果自身定义了font-size那么就按照自身为参考 ，否则就往父级查找，知道找到html，<br> 浏览器的默认字体是16px， 所以 0.5em &#x3D; 16px * 0.5 &#x3D; 8px;</p></li><li><p>rem 是root+ em的意思，它的参考物是html的font-size值</p></li><li><p>vw是view width的缩写 1vw &#x3D; 浏览器视图区域的1&#x2F;100 ； 视图区域不包括工具栏和按钮的</p></li><li><p>pt:point，大约1&#x2F;72寸<br>绝对长度单位，多用于字体尺寸，1px &#x3D; 0.75pt。</p></li></ol><h1 id="BFC的理解-cankao1"><a href="#BFC的理解-cankao1" class="headerlink" title="BFC的理解 cankao1"></a>BFC的理解 <a href="https://wybing.blog.csdn.net/article/details/112447876?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-112447876-blog-125100383.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-112447876-blog-125100383.pc_relevant_default&utm_relevant_index=1">cankao1</a></h1><p><a href="http://blog.tiaozaoj.com/index.php/archives/221/">cankao2</a><br>其中FC是formatting context的首字母缩写，直译过来是格式化上下文，它是页面中的一块独立的渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。</p><h2 id="触发BFC条件"><a href="#触发BFC条件" class="headerlink" title="触发BFC条件"></a>触发BFC条件</h2><p>根元素（html就是根元素，整个html就是一个独立的BFC）<br>float属性不为none（如：left | right）<br>overflow的值不为visible（如：hidden | auto | scroll）<br>display属性值为inline-block | flex | inline-flex | table-cell | table-caption<br>position为absolute或fixed</p><h2 id="应用BFC"><a href="#应用BFC" class="headerlink" title="应用BFC"></a>应用BFC</h2><p>解决margin塌陷问题<br>也就是解决，在一个标准流body（body元素就是一个BFC）中相邻盒子之间垂直margin重叠的问题。<br>方法：触发其中一个盒子的BFC，成为一个独立的容器，根据BFC规则，这个盒子的布局不受外部元素影响。<br>解决高度塌陷问题<br>当一个标准流中的盒子中所有的子元素都进行了浮动，并且没有给盒子设置高度时，那么这个盒子的整个高度就会塌陷，浮动的子元素高度不计算在父元素内，父元素高度就为0。<br>方法：触发这个盒子生成BFC，根据规则计算BFC的高度时，浮动元素也参与计算。</p><h1 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h1><p>伪类：伪类是用来定义元素特殊状态的，他可以用来设置鼠标悬停样式、元素获取焦点样式、设置链接样式等。如常见的 hover、active、link 等都是伪类。</p><p>伪元素：伪元素也称为伪对象，它不存在于 DOM 文档中、是一个虚拟的元素。它可以用来代表某个元素的子元素，但是这个子元素并不存在于文档树中。比如::before表示选择元素内容的之前内容，也就是””；</p><p>伪类和伪元素的根本区别在于：是否创造了新的元素。</p><h1 id="核模型-ie核模型和标准核模型的区别"><a href="#核模型-ie核模型和标准核模型的区别" class="headerlink" title="核模型 ie核模型和标准核模型的区别"></a>核模型 ie核模型和标准核模型的区别</h1><h2 id="ie核模型ie5-5之前的是ie核模型"><a href="#ie核模型ie5-5之前的是ie核模型" class="headerlink" title="ie核模型ie5.5之前的是ie核模型"></a>ie核模型ie5.5之前的是ie核模型</h2><p> <strong>widht &#x3D; content + padding + borderWdith</strong><br>也就是说其宽度width 是 content + padding + border，此时div所占实际大小就是width<br>box-sizing： border-box </p><h2 id="标准核模型"><a href="#标准核模型" class="headerlink" title="标准核模型"></a>标准核模型</h2><p><strong>width &#x3D; content</strong>  宽度就是content内容<br>box-sizing： content-box<br>此时一个div所占大小是width（content）+ padding + width</p><p>box-sizing: border-box | content-box | inherit(继承父级的box-sizing属性)</p><h1 id="grid-x2F-table-x2F-flex"><a href="#grid-x2F-table-x2F-flex" class="headerlink" title="grid &#x2F; table &#x2F; flex"></a>grid &#x2F; table &#x2F; flex</h1><h1 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h1><p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">grid布局</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">// 容器属性</span><br><span class="line"><span class="selector-class">.pr</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template</span>-column: <span class="number">10px</span>, <span class="number">20px</span>, <span class="number">30px</span>, // 定义了<span class="number">3</span>列 每列宽度分别是 <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span>；</span><br><span class="line">    grid-template-column: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">50%</span>) //定义<span class="number">2</span>列， 每列宽度占<span class="number">50%</span></span><br><span class="line">    grid-template-column: <span class="built_in">repeat</span>(auto-fill， <span class="number">100px</span>)；表示每列宽度<span class="number">100px</span>，但是每列尽可能填充多个单元格</span><br><span class="line">    grid-template-column: <span class="number">1</span>fr， <span class="number">2</span>fr， <span class="number">3</span>fr</span><br><span class="line">    // fr是fraction缩写表示片段 表示三列，第二列宽度是第一列的一倍，第三列是第一列的<span class="number">3</span>倍</span><br><span class="line"></span><br><span class="line">    grid-template-column：<span class="number">10px</span>, <span class="built_in">maxmin</span>(<span class="number">100px</span>, <span class="number">50px</span>); 表示<span class="number">2</span>列， 第二列的宽度在<span class="number">100px</span>和<span class="number">50px</span>范围内</span><br><span class="line">    <span class="attribute">grid-template</span>-column：<span class="number">10px</span>， auto// auto表示第二列宽度由浏览器决定</span><br><span class="line"></span><br><span class="line">    <span class="attribute">grid-column</span>-<span class="attribute">gap</span>： <span class="number">10px</span>； // <span class="attribute">gap</span>表示间距空白处， 表示每列之间的间距是<span class="number">10px</span></span><br><span class="line">    <span class="attribute">grid-row</span>-<span class="attribute">gap</span>：<span class="number">20px</span> // 每行行间距是<span class="number">20px</span></span><br><span class="line">    <span class="attribute">grid-gap</span>： <span class="number">20px</span>， <span class="number">10px</span>； &lt;<span class="attribute">grid-row</span>-<span class="attribute">gap</span>&gt; 和 &lt;<span class="attribute">grid-column</span>-<span class="attribute">gap</span>&gt; 的缩写</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: [c1] <span class="number">100px</span> [c2] <span class="number">100px</span> [c3] auto [c4];</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: [r1] <span class="number">100px</span> [r2] <span class="number">100px</span> [r3] auto [r4];</span><br><span class="line"></span><br><span class="line">    // 先划分出<span class="number">9</span>个单元格，然后将其定名为<span class="selector-tag">a</span>到<span class="selector-tag">i</span>的九个区域，分别对应这九个单元格。</span><br><span class="line">    <span class="attribute">grid-template-areas</span>: <span class="string">&#x27;a b c&#x27;</span></span><br><span class="line">                       <span class="string">&#x27;d e f&#x27;</span></span><br><span class="line">                       <span class="string">&#x27;g h i&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 多个单元格合并成一个区域的写法如下</span><br><span class="line">    <span class="attribute">grid-template-areas</span>: <span class="string">&#x27;a a a&#x27;</span></span><br><span class="line">                     <span class="string">&#x27;b b b&#x27;</span></span><br><span class="line">                     <span class="string">&#x27;c c c&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    // 划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是&quot;先行后列&quot;，</span><br><span class="line">    // 即先填满第一行，再开始放入第二行，即下图数字的顺序</span><br><span class="line">    // <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">    // <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    //但是这个顺序可以改变 默认是 row 先行后列 ； </span><br><span class="line">    // <span class="number">1</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line">    // <span class="number">2</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">    <span class="attribute">grid-auto-flow</span>: column; // 先列后行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    justify-items: start | end | end | stretch; //  单元格内容水平对齐方式</span><br><span class="line">    <span class="attribute">align-items</span>: start | end | center | stretch; // 垂直对齐</span><br><span class="line"></span><br><span class="line">    // 整个整个表格在容器中的布局</span><br><span class="line">    <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly; </span><br><span class="line">    // space-around 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</span><br><span class="line">    // space-between 项目与项目的间隔相等，项目与容器边框之间没有间隔。</span><br><span class="line">    // space-evenly 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</span><br><span class="line"></span><br><span class="line">    <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  项目属性</span><br><span class="line">&#123;</span><br><span class="line">    <span class="selector-class">.item-1</span> &#123;</span><br><span class="line">        justify-self:  start | end | center | stretch ;</span><br><span class="line">        <span class="attribute">align-self</span>: start | end | center | stretch; </span><br><span class="line">        place-self: &lt;align-self&gt; &lt;justify-self&gt;; // 合体属性</span><br><span class="line">        <span class="attribute">grid-area</span>: a  // 属性指定项目放在哪一个区域</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><p><a href="">table</a></p><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">flex语法篇</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">实例篇</a></p><h1 id="css3的新增属性"><a href="#css3的新增属性" class="headerlink" title="css3的新增属性"></a>css3的新增属性</h1><h1 id="如何将一个盒子水平垂直居中"><a href="#如何将一个盒子水平垂直居中" class="headerlink" title="如何将一个盒子水平垂直居中"></a>如何将一个盒子水平垂直居中</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">// <span class="number">1</span>. 用<span class="attribute">display</span> ： <span class="selector-tag">table</span>-cell； <span class="attribute">text-align</span>: center; <span class="attribute">vertical-align</span>: middle</span><br><span class="line">.box&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2. 已知父级盒子的height， 子元素设置 margin： 父级盒子高度的一半 减去 子元素高度的一半 */</span></span><br><span class="line">    <span class="selector-class">.fa</span>&#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: black;</span><br><span class="line">      <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 子容器样式 */</span></span><br><span class="line">    <span class="selector-class">.son</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: white;</span><br><span class="line">      <span class="comment">/* 水平垂直居中 */</span></span><br><span class="line">      <span class="comment">/* 父级盒子高度的一半 减去 子元素高度的一半 */</span></span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">250px</span> auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    3. 父元素相对定位，子元素绝对定位，并且子元素 top，left，bottom，right设置为0，margin：auto</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">/* 父容器 */</span></span><br><span class="line">    <span class="selector-class">.fa</span>&#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">700px</span>;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">background-color</span>: black;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 子容器 */</span></span><br><span class="line">    <span class="selector-class">.son</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: white;</span><br><span class="line">      <span class="attribute">position</span>:absolute;</span><br><span class="line">      <span class="comment">/* 水平垂直居中 */</span></span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">margin</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    4. 父元素相对定位，子元素绝对定位，并且子元素 top： 50%，，left：50%，</span></span><br><span class="line"><span class="comment">    margin-top: 子元素高度一半的负值</span></span><br><span class="line"><span class="comment">    margin-left: 子容器宽度一半的负值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="selector-class">.pa</span>&#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">700px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: black;</span><br><span class="line">       <span class="comment">/* 父容器开启相对定位*/</span></span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 子容器 */</span></span><br><span class="line">    <span class="selector-class">.son</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: white;</span><br><span class="line">      <span class="comment">/* 子容器开启绝对定位*/</span></span><br><span class="line">      <span class="attribute">position</span>:absolute;</span><br><span class="line">      <span class="comment">/* 水平垂直居中 */</span></span><br><span class="line">      <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">margin-top</span>: -<span class="number">150px</span>; <span class="comment">/** 子元素高度一半的负值 */</span></span><br><span class="line">      <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    原理同上先通过绝对定位将div定位到上，左各一半的位置，然后通过translate，向上或者向左移动自身一半的位置。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">    <span class="selector-class">.fa</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000000</span>;</span><br><span class="line">        <span class="attribute">background</span>:<span class="number">#ddd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.children</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>; </span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">        <span class="attribute">background</span>:green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    flex布局</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">/* 父容器 */</span></span><br><span class="line">    <span class="selector-class">.fa</span>&#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">700px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: black;</span><br><span class="line">      <span class="comment">/* 父容器开启flex布局 */</span></span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="comment">/* 水平垂直居中 */</span></span><br><span class="line">      <span class="attribute">justify-content</span>: center;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
